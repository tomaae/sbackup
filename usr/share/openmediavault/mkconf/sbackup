#!/bin/sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_SBACKUP_SCRIPTS_DIR=${OMV_SBACKUP_SCRIPTS_DIR:-"/var/lib/openmediavault/sbackup.d"}
OMV_SBACKUP_SCRIPTS_MASK=${OMV_SBACKUP_SCRIPTS_MASK:-"755"}
OMV_SBACKUP_LOGDIR=${OMV_SBACKUP_LOGDIR:-"/var/log/sbackup/sessionlogs"}
OMV_SBACKUP_LOGFILE=${OMV_SBACKUP_LOGFILE:-"/var/log/sbackup/backup.log"}
mkdir -p ${OMV_SBACKUP_LOGDIR}

OMV_SBACKUP_CRONFILE=${OMV_SBACKUP_CRONFILE:-"/etc/cron.d/sbackup"}
#OMV_SBACKUP_CRONFILE=${OMV_SBACKUP_CRONFILE:-"/var/lib/openmediavault/sbackup.d/cron-sbackup"}
echo "# This configuration file is auto-generated." > "${OMV_SBACKUP_CRONFILE}"
echo "# WARNING: Do not edit this file, your changes will be lost." >> "${OMV_SBACKUP_CRONFILE}"

# Create the backup jobs. Each job is configured in a separate script.
mkdir -p ${OMV_SBACKUP_SCRIPTS_DIR}
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/config-*
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/script-*



# Create the scripts regardless if enabled or disabled.
xmlstarlet sel -t -m "//services/sbackup/backuplist/backup" \
  -v "uuid" \
  -i "position() != last()" -n -b \
  ${OMV_CONFIG_FILE} | xmlstarlet unesc |
  while read uuid; do
  				GET_SOURCE_NAME=${GET_SOURCE_NAME=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldersource]" -v "name" -b}
  				GET_SOURCE_MNT=${GET_SOURCE_MNT=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldersource]" -v "//system/fstab/mntent[uuid=current()/mntentref]/dir" -b}
  				GET_SOURCE_PATH=${GET_SOURCE_PATH=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldersource]" -v "concat(//system/fstab/mntent[uuid=current()/mntentref]/dir,'/',reldirpath)" -b}
  				GET_SOURCE_RELDIR=${GET_SOURCE_RELDIR=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldersource]" -v "reldirpath" -b}
  				
  				GET_TARGET_NAME=${GET_TARGET_NAME=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldertarget]" -v "name" -b}
  				GET_TARGET_MNT=${GET_TARGET_MNT=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldertarget]" -v "//system/fstab/mntent[uuid=current()/mntentref]/dir" -b}
  				GET_TARGET_PATH=${GET_TARGET_PATH=-m "//system/shares/sharedfolder[uuid=current()/sharedfoldertarget]" -v "concat(//system/fstab/mntent[uuid=current()/mntentref]/dir,'/',reldirpath)" -b}
  				GET_TARGET_DEST=${GET_TARGET_DEST=${GET_TARGET_PATH} -o "/" ${GET_SOURCE_RELDIR}}
  				
  				##Generate backup config
#          xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
#                -o "# This configuration file is auto-generated." -n \
#                -o "# WARNING: Do not edit this file, your changes will be lost." -n \
#                -o "uuid=" -v "uuid" -n \
#                -o "enable=" -v "enable" -n \
#                -o "wday=" -v "wday" -n \
#                -o "hour=" -v "hour" -n \
#                -o "minute=" -v "minute" -n \
#          			-o "backup_source=" ${GET_SOURCE_PATH} -o "/"  -n \
#          			-o "backup_target=" ${GET_TARGET_DEST} -o "/"  -n \
#          			-o "target=" -v "sharedfoldertarget" -n \
#          		${OMV_CONFIG_FILE} | xmlstarlet unesc > "${OMV_SBACKUP_SCRIPTS_DIR}/config-${uuid}"

          ##Generate backup script
       	 	runfile="/var/run/sbackup-${uuid}"
					xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
                -o "#!/bin/sh" -n \
                -o "# This configuration file is auto-generated." -n \
                -o "# WARNING: Do not edit this file, your changes will be lost." -n \
                -o ". /usr/share/openmediavault/scripts/helper-functions" -n \
                -o "SB_TIMESTART=\$(date +\"%s\")" -n \
                -o "cleanup() {" -n \
                -o "  omv_kill_children \$\$" -n \
                -o "  rm -f ${runfile}" -n \
                -i "savelog = 1" -o "  echo \"\$RSOUT\" > \"" -o ${OMV_SBACKUP_LOGDIR} -o "/" -v "name" -o "_" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -b -n \
                -o "  IFS='" -n \
                -o "'" -n \
                -o "  for line in \`echo \"\$RSOUT\"\`; do " -n \
                -o "  RSSIZE=\$(echo \${line}|awk '/^total size is / {print \$4\"|\"\$7}')" -n \
    						-o "  done" -n \
    						-o "  SB_TIMEEND=\$(date +\"%s\")" -n \
    						-o "  echo \"" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}|\${SB_TIMEEND}|\${SB_ECODE}|\${RSSIZE}|"  -o "\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
    						-o "  echo \"\${SB_TIMESTART}|\${SB_TIMEEND}|\${SB_ECODE}|\${RSSIZE}|"  -o "\" > \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/laststatus-" -v "uuid" -o "\"" -n \
    						-o "  if [ \"\${SB_ECODE}\" = \"0\" ]; then" -n \
    						-o "    echo \"\${SB_TIMESTART}|\${SB_TIMEEND}|\${SB_ECODE}|\${RSSIZE}|"  -o "\" > \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/lastcompleted-" -v "uuid" -o "\"" -n \
    						-o "  fi" -n \
    						-i "savelog = 1" \
    						  -o "  echo \"Start time: \$(date -d @\${SB_TIMESTART})\" >> \"" -o ${OMV_SBACKUP_LOGDIR} -o "/" -v "name" -o "_" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
    						  -o "  echo \"End time: \$(date -d @\${SB_TIMEEND})\" >> \"" -o ${OMV_SBACKUP_LOGDIR} -o "/" -v "name" -o "_" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n  \
    						  -o "  echo \"Status: \${SB_ECODE}\" >> \"" -o ${OMV_SBACKUP_LOGDIR} -o "/" -v "name" -o "_" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
    						  -b \
                -o "  exit 0" -n \
                -o "}" -n \
                -o "# Check if backup is already running." -n \
                -o "[ -e ${runfile} ] && exit 1" -n \
                -o "# Check if all filesystems are mounted." -n \
                -o "if ! omv_is_mounted \"" ${GET_SOURCE_MNT} -o "\" ; then" -n \
                -o "    echo \"Source storage device not mounted!\"" -n \
                -o "    echo \"" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}||Source not mounted||"  -o "\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
                -o "    echo \"\${SB_TIMESTART}||Source not mounted||"  -o "\" > \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/laststatus-" -v "uuid" -o "\"" -n \
                -o "    exit 1" -n \
                -o "fi" -n \
                -o "if ! omv_is_mounted \"" ${GET_TARGET_MNT} -o "\" ; then" -n \
                -o "    echo \"Target storage device not mounted!\"" -n \
                -o "    echo \"" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}||Target not mounted||"  -o "\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
                -o "    echo \"\${SB_TIMESTART}||Target not mounted||"  -o "\" > \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/laststatus-" -v "uuid" -o "\"" -n \
                -o "    exit 1" -n \
                -o "fi" -n \
                -o "trap cleanup 0 1 2 5 9 15" -n \
                -o "touch ${runfile}" -n \
                -o "# Create target directory." -n \
                -o "mkdir -p \"" ${GET_TARGET_DEST} -o "\"" -n \
                -o "chmod 777 \"" ${GET_TARGET_DEST} -o "\"" -n \
                -o "# Syncing \"" ${GET_SOURCE_PATH} -o "\" to \"" ${GET_TARGET_DEST} -o "\"" -n \
                -o "RSOUT=\$(rsync --verbose" \
                -o " -nrlHpEAXogt --delete " \
                -o " \"" ${GET_SOURCE_PATH} -o "\"" -o " \"" ${GET_TARGET_DEST} -o "\" 2>&1)" -n \
                -o " SB_ECODE=\$(echo \$?)" -n \
          		${OMV_CONFIG_FILE} | xmlstarlet unesc > "${OMV_SBACKUP_SCRIPTS_DIR}/script-${uuid}"
          chmod ${OMV_SBACKUP_SCRIPTS_MASK} "${OMV_SBACKUP_SCRIPTS_DIR}/script-${uuid}"
          
          ##Generate cron
					xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
								-i "enable = 0" -o "#" -b \
                -v "minute" -o " " -v "hour" -o " * * " \
                -i "wday < 7" -v "wday" -b \
                -i "wday = 7" -o "*" -b \
                -o " root" -o " ${OMV_SBACKUP_SCRIPTS_DIR}/script-${uuid}" \
              ${OMV_CONFIG_FILE} | xmlstarlet unesc >> "${OMV_SBACKUP_CRONFILE}"
done
