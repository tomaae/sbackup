#!/bin/sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_SBACKUP_SESLOGDIR=${OMV_SBACKUP_SESLOGDIR:-"/var/log/sbackup/sessionlogs"}
mkdir -p ${OMV_SBACKUP_SESLOGDIR}
OMV_SBACKUP_SCRIPTS_DIR=${OMV_SBACKUP_SCRIPTS_DIR:-"/var/lib/openmediavault/sbackup.d"}
mkdir -p ${OMV_SBACKUP_SCRIPTS_DIR}
OMV_SBACKUP_JOBS_DIR=${OMV_SBACKUP_JOBS_DIR:-"/etc/sbackup/jobs"}
mkdir -p ${OMV_SBACKUP_JOBS_DIR}
OMV_SBACKUP_SCRIPTS_MASK=${OMV_SBACKUP_SCRIPTS_MASK:-"755"}

#rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/config_*
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/backup_*
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/purge_*
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/verify_*
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/restore_*
rm -f ${OMV_SBACKUP_SCRIPTS_DIR}/manual_*


OMV_SBACKUP_CRONFILE=${OMV_SBACKUP_CRONFILE:-"/etc/cron.d/sbackup"}
echo "# This configuration file is auto-generated." > "${OMV_SBACKUP_CRONFILE}"
echo "# WARNING: Do not edit this file, your changes will be lost." >> "${OMV_SBACKUP_CRONFILE}"

# Create the scripts regardless if enabled or disabled.
xmlstarlet sel -t -m "//services/sbackup/backuplist/backup" \
  -v "uuid" \
  -i "position() != last()" -n -b \
  ${OMV_CONFIG_FILE} | xmlstarlet unesc |
  while read uuid; do
  	
    JOB_TYPE=$(omv_config_get "//services/sbackup/backuplist/backup[uuid='${uuid}']/job_type")
  	OMV_SBACKUP_LOGFILE=${OMV_SBACKUP_LOGFILE:-"/var/log/sbackup/history_" -v "uuid"}
  	
		GET_SOURCE_NAME=${GET_SOURCE_NAME=-m "//system/shares/sharedfolder[uuid=current()/source_sharedfolder_uuid]" -v "name" -b}
		GET_SOURCE_MNT=${GET_SOURCE_MNT=-m "//system/shares/sharedfolder[uuid=current()/source_sharedfolder_uuid]" -v "//system/fstab/mntent[uuid=current()/mntentref]/dir" -b}
		GET_SOURCE_PATH=${GET_SOURCE_PATH=-m "//system/shares/sharedfolder[uuid=current()/source_sharedfolder_uuid]" -v "concat(//system/fstab/mntent[uuid=current()/mntentref]/dir,'/',reldirpath)" -b}
		
		GET_TARGET_NAME=${GET_TARGET_NAME=-m "//system/shares/sharedfolder[uuid=current()/target_sharedfolder_uuid]" -v "name" -b}
		GET_TARGET_MNT=${GET_TARGET_MNT=-m "//system/shares/sharedfolder[uuid=current()/target_sharedfolder_uuid]" -v "//system/fstab/mntent[uuid=current()/mntentref]/dir" -b}
		GET_TARGET_PATH=${GET_TARGET_PATH=-m "//system/shares/sharedfolder[uuid=current()/target_sharedfolder_uuid]" -v "concat(//system/fstab/mntent[uuid=current()/mntentref]/dir,'/',reldirpath)" -b}
		GET_TARGET_DEST=${GET_TARGET_DEST=${GET_TARGET_PATH} -o "/sbackup_" -v "uuid" -o "/"}

		##Generate backup config
		xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
			-o "#This configuration file is auto-generated." -n \
			-o "#WARNING: Do not edit this file, your changes will be lost." -n \
      -o "uuid=" -v "uuid" -n \
      -o "enable=" -v "enable" -n \
      -o "name=" -v "name" -n \
      -o "job_type=" -v "job_type" -n \
      -o "backup_type=" -v "backup_type" -n \
      -o "source_sharedfolder_uuid=" -v "source_sharedfolder_uuid" -n \
      -o "backup_source_mnt=" ${GET_SOURCE_MNT} -n \
      -o "backup_source=" ${GET_SOURCE_PATH} -n \
      -o "target_sharedfolder_uuid=" -v "target_sharedfolder_uuid" -n \
      -o "backup_target_mnt=" ${GET_TARGET_MNT} -n \
      -o "backup_target=" ${GET_TARGET_DEST} -n \
      -o "schedule_enable=" -v "schedule_enable" -n \
      -o "schedule_wday=" -v "schedule_wday" -n \
      -o "schedule_hour=" -v "schedule_hour" -n \
      -o "schedule_minute=" -v "schedule_minute" -n \
      -o "lvmsnap_enable=" -v "lvmsnap_enable" -n \
      -o "lvmsnap_size=" -v "lvmsnap_size" -n \
      -o "lvmsnap_fallback=" -v "lvmsnap_fallback" -n \
      -o "queue=" -v "queue" -n \
      -o "autorestart=" -v "autorestart" -n \
      -o "report=" -v "report" -n \
      -o "post_purge=" -v "post_purge" -n \
      -o "protect_days_job=" -v "protect_days_job" -n \
      -i "post_job != \"\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/enable = \"1\"" \
        -o "post_job=" -v "post_job" -n \
        -o "post_job_type=" -v "//services/sbackup/backuplist/backup[uuid=current()/post_job]/job_type" -n \
      -b \
      -o "purge_job_uuid=" -v "purge_job_uuid" -n \
      -o "verify_job_uuid=" -v "verify_job_uuid" -n \
			${OMV_CONFIG_FILE} | xmlstarlet unesc > "${OMV_SBACKUP_JOBS_DIR}/${uuid}"
    
    if [ "${JOB_TYPE}" = "backup" ];then
      ##Generate backup script
   	 	runfile="/var/run/sbackup_${uuid}"
  		xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
        -o "#!/bin/sh" -n \
        -o "# This configuration file is auto-generated." -n \
        -o "# WARNING: Do not edit this file, your changes will be lost." -n \
        -o ". /usr/share/openmediavault/scripts/helper-functions" -n \
        -o "SB_TIMESTART=\$(date +\"%s\")" -n \
        -o "cleanup() {" -n \
        -o "  omv_kill_children \$\$" -n \
        -o "  RSSIZE=\$(cat \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"|awk '/^Total file size: / {print \$4}')" -n \
        -o "  RSPERF=\$(cat \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"|awk '/ bytes\/sec\$/ {print \$(NF-1)}')" -n \
  			-o "  SB_TIMEEND=\$(date +\"%s\")" -n \
  			-o "  if [ \"\${SB_ECODE}\" = \"\" ]; then" -n \
  			-o "    SB_ECODE=-1" -n \
  			-o "  fi" -n \
  			-o "  cat \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"|sed \"s/^running|\(.*\)|\(.*\)|\${SB_TIMESTART}||||backup|/\${SB_ECODE}|\1|\2|\${SB_TIMESTART}|\${SB_TIMEEND}|\${RSSIZE}|\${RSPERF}|backup|/g\" > \"" -o ${OMV_SBACKUP_LOGFILE} -o ".new\"" -n \
  			-o "  mv \"" -o ${OMV_SBACKUP_LOGFILE} -o ".new\" \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
  			-o "  echo \"\n\nEnd time: \$(date -d @\${SB_TIMEEND})\nStatus: \${SB_ECODE}\" >> \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
  			-o "  if [ \"\${SB_ECODE}\" = \"0\" ]; then" -n \
        -o "    mkdir -p \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/\"" -n \
        -o "    chmod 777 \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/\"" -n \
        -o "    cp \"" -o ${OMV_SBACKUP_LOGFILE} -o "\" \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/\"" -n \
        -o "    cp \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\" \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/\"" -n \
        -o "    [ -e \"" ${GET_TARGET_DEST} -o "/data_latest\" ] && rm \"" ${GET_TARGET_DEST} -o "/data_latest\"" -n \
        -o "    ln -s \"" ${GET_TARGET_DEST} -o "/data_\${SB_TIMESTART}/\" \"" ${GET_TARGET_DEST} -o "/data_latest\"" -n \
        -o "    [ -e \"" ${GET_TARGET_DEST} -o "/meta_latest\" ] && rm \"" ${GET_TARGET_DEST} -o "/meta_latest\"" -n \
        -o "    ln -s \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/\" \"" ${GET_TARGET_DEST} -o "/meta_latest\"" -n \
        -o "    echo \"#!/bin/sh\" > \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \". /etc/default/openmediavault\" >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \". /usr/share/openmediavault/scripts/helper-functions\" >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"if ! omv_config_exists \\\"/config/services/sbackup/backuplist/backup[uuid='" -v "uuid" -o "']\\\"; then\"  >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"  object=\\\"<uuid>" -v "uuid" -o "</uuid><enable>" -v "enable" -o "</enable><name>" -v "name" -o "</name><job_type>" -v "job_type" -o "</job_type><backup_type>" -v "backup_type" -o "</backup_type><source_sharedfolder_uuid>" -v "source_sharedfolder_uuid" -o "</source_sharedfolder_uuid><target_sharedfolder_uuid>" -v "target_sharedfolder_uuid" -o "</target_sharedfolder_uuid><schedule_wday>" -v "schedule_wday" -o "</schedule_wday><schedule_hour>" -v "schedule_hour" -o "</schedule_hour><schedule_minute>" -v "schedule_minute" -o "</schedule_minute><post_purge>" -v "post_purge" -o "</post_purge><protect_days_job>" -v "protect_days_job" -o "</protect_days_job><post_job>" -v "post_job" -o "</post_job><purge_job_uuid>" -v "purge_job_uuid" -o "</purge_job_uuid><verify_job_uuid>" -v "verify_job_uuid" -o "</verify_job_uuid>\\\"\" >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"  omv_config_add_element \\\"/config/services/sbackup/backuplist\\\" \\\"backup\\\" \\\"\\\${object}\\\" true\" >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"cp " ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/history_" -v "uuid" -o "\" " -o ${OMV_SBACKUP_LOGFILE} -o " >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"cp " ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/" -v "uuid" -o "_\${SB_TIMESTART}.log\" " -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_\${SB_TIMESTART}.log >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"  echo Import completed\" >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
        -o "    echo \"fi\" >> \"" ${GET_TARGET_DEST} -o "/meta_\${SB_TIMESTART}/import.sh\"" -n \
  			-o "  fi" -n \
  			-o "  echo \"backup|completed|\" > ${runfile}" -n \
  			-i "post_purge = 1" -o "  \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/purge_" -v "uuid" -o "\"" -b -n \
        -o "  [ -e \"${runfile}\" ] && rm -f \"${runfile}\"" -n \
        -i "post_job != \"\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/enable = \"1\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/job_type = \"backup\""  -o "  [ \"\${SB_ECODE}\" = \"0\" ] && \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/backup_" -v "post_job" -o "\"" -b -n \
        -i "post_job != \"\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/enable = \"1\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/job_type = \"restore\"" -o "  [ \"\${SB_ECODE}\" = \"0\" ] && \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/restore_" -v "post_job" -o "\"" -b -n \
        -i "post_job != \"\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/enable = \"1\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/job_type = \"purge\""   -o "  [ \"\${SB_ECODE}\" = \"0\" ] && \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/purge_" -v "post_job" -o "\"" -b -n \
        -i "post_job != \"\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/enable = \"1\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/job_type = \"copy\""    -o "  [ \"\${SB_ECODE}\" = \"0\" ] && \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/backup_" -v "post_job" -o "\"" -b -n \
        -i "post_job != \"\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/enable = \"1\" and //services/sbackup/backuplist/backup[uuid=current()/post_job]/job_type = \"verify\""  -o "  [ \"\${SB_ECODE}\" = \"0\" ] && \"" -o ${OMV_SBACKUP_SCRIPTS_DIR} -o "/verify_" -v "post_job" -o "\"" -b -n \
        -o "  exit 0" -n \
        -o "}" -n \
        -o "# Check if backup is already running." -n \
        -o "[ -e \"${runfile}\" ] && exit 1" -n \
        -o "# Check if all filesystems are mounted." -n \
        -o "if ! omv_is_mounted \"" ${GET_SOURCE_MNT} -o "\" ; then" -n \
        -o "  echo \"Source not mounted|" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}||||backup|\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
        -o "  exit 1" -n \
        -o "fi" -n \
        -o "if ! omv_is_mounted \"" ${GET_TARGET_MNT} -o "\" ; then" -n \
        -o "  echo \"Target not mounted|" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}||||backup|\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
        -o "  exit 1" -n \
        -o "fi" -n \
        -o "echo \"backup|\$\$|\" > ${runfile}" -n \
        -o "# Run backup" -n \
        -o "[ -e \"" -o ${OMV_SBACKUP_LOGFILE} -o "\" ] && LASTERR=\$(cat \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"|grep \"|backup|$\"|tail -1|awk -F \"|\" '{print \$1}')" -n \
        -o "if [ \"\${LASTERR}\" != \"\" ]; then" -n \
  			-o "  if [ \"\${LASTERR}\" != \"0\" ]; then" -n \
  			-o "    LASTSTAMP=\$(cat \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"|grep \"|backup|$\"|tail -1|awk -F \"|\" '{print \$4}')" -n \
  			-o "    if [ -d \"" ${GET_TARGET_DEST} -o "/data_\${LASTSTAMP}\" ]; then" -n \
  			-o "      echo \"Restarting backup from \$(date -d @\${LASTSTAMP}) \n\n\" >> \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
  			-o "      mv \"" ${GET_TARGET_DEST} -o "/data_\${LASTSTAMP}\" \"" ${GET_TARGET_DEST} -o "/data_\${SB_TIMESTART}\"" -n \
  			-o "      [ -d \"" ${GET_TARGET_DEST} -o "/meta_\${LASTSTAMP}\" ] && rm -r \"" ${GET_TARGET_DEST} -o "/meta_\${LASTSTAMP}\"" -n \
  			-o "    fi" -n \
        -o "  fi" -n \
        -o "  LASTSTAMP=\$(cat \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"|grep \"|backup|$\"|grep \"^0|\"|tail -1|awk -F \"|\" '{print \$4}')" -n \
        -o "  if [ \"\${LASTSTAMP}\" != \"\" ]; then" -n \
        -o "    if [ \"\${LASTSTAMP}\" -gt \"100\" ]; then" -n \
        -o "      if [ -d \"" ${GET_TARGET_DEST} -o "/data_\${LASTSTAMP}\" ]; then" -n \
        -o "        INCR=--link-dest=\"" ${GET_TARGET_DEST} -o "/data_\${LASTSTAMP}/\"" -n \
        -o "      fi" -n \
        -o "    fi" -n \
        -o "  fi" -n \
        -o "fi" -n \
        -o "mkdir -p \"" ${GET_TARGET_DEST} -o "/data_\${SB_TIMESTART}/\"" -n \
        -o "chmod 777 \"" ${GET_TARGET_DEST} -o "/data_\${SB_TIMESTART}/\"" -n \
        -o "echo \"running|" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}||||backup|\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
        -o "sleep 1" -n \
        -o "echo \"Backup name: " -v "name" -o "\nUUID: " -v "uuid" -o "\nStart time: \$(date -d @\${SB_TIMESTART})\n\n\" > \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
        -o "trap cleanup 0 1 2 5 9 15" -n \
        -o "rsync --verbose --stats" \
        -o " -aEAX --delete \${INCR}" \
        -o " \"" ${GET_SOURCE_PATH} -o "\"" -o " \"" ${GET_TARGET_DEST} -o "/data_\${SB_TIMESTART}/\" 2>&1 >> \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
        -o "SB_ECODE=\$(echo \$?)" -n \
      	${OMV_CONFIG_FILE} | xmlstarlet unesc > "${OMV_SBACKUP_SCRIPTS_DIR}/backup_${uuid}"
      chmod ${OMV_SBACKUP_SCRIPTS_MASK} "${OMV_SBACKUP_SCRIPTS_DIR}/backup_${uuid}"
      
  		##Generate Purge scripts
  		xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
        -o "#!/bin/sh" -n \
  			-o "# This configuration file is auto-generated." -n \
  			-o "# WARNING: Do not edit this file, your changes will be lost." -n \
  			-o "SB_TIMESTART=\$(date +\"%s\")" -n \
  			-o "if [ -e \"${runfile}\" ];then" -n \
  			-o "  LSTATUS=\$(cat \"" -o ${runfile} -o "\"|head -1|cut -d \| -f2)" -n \
  			-o "  [ \"\${LSTATUS}\" != \"completed\" ] && exit 1" -n \
  			-o "fi" -n \
  			-o "echo \"purge|\$\$|\" > \"${runfile}\"" -n \
  			-o "echo \"running|" -v "name" -o "|" -v "uuid" -o "|\${SB_TIMESTART}||||purge|\" >> \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
  			-o "sleep 1" -n \
  			-o "echo \"Backup name: " -v "name" -o "\nUUID: " -v "uuid" -o "\nStart time: \$(date -d @\${SB_TIMESTART})\n\" > \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
        -o "[ \"\$1\" != \"\" ] && PURGEDAYS=\${1}" -n \
        -o "if [ -e \"" -o $OMV_SBACKUP_LOGFILE -o "\" ];then" -n \
        -o "  #Get last backup" -n \
        -o "  while IFS='|', read r_status d d r_start d d d r_type; do" -n \
        -o "    [ \"\${r_type}\" != \"backup\" ] && continue" -n \
        -o "    [ \"\${r_status}\" != \"0\" ] && continue" -n \
        -o "    [ ! -d \"" ${GET_TARGET_DEST} -o "/data_\${r_start}/\" ] && continue" -n \
        -o "    LAST_BACKUP=\${r_start}" -n \
        -o "  done < " -o $OMV_SBACKUP_LOGFILE -n \
        -o "  #Cleanup backup data" -n \
        -o "  PURGETIME=\$((SB_TIMESTART-(" -v "protect_days_job" -o "*86400)))" -n \
        -o "  [ \"\${PURGEDAYS}\" != \"\" ] && PURGETIME=\$((SB_TIMESTART-(\${PURGEDAYS}*86400)))" -n \
        -o "  while IFS='|', read r_status d d r_start d d d r_type; do" -n \
        -o "		[ \"\${r_status}\" = \"running\" ] && continue" -n \
        -o "		[ \"\${r_start}\" -lt \"100\" ] && continue" -n \
        -o "		[ \"\${r_start}\" -gt \"\${PURGETIME}\" ] && continue" -n \
        -o "		[ \"\${r_start}\" = \"\${LAST_BACKUP}\" ] && continue" -n \
        -o "    echo \"Purging version \$(date -d @\${r_start})\" >> \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
        -o "    [ -d \"" ${GET_TARGET_DEST} -o "/data_\${r_start}/\" ] && rm -r \"" ${GET_TARGET_DEST} -o "/data_\${r_start}/\"" -n \
        -o "    [ -d \"" ${GET_TARGET_DEST} -o "/meta_\${r_start}/\" ] && rm -r \"" ${GET_TARGET_DEST} -o "/meta_\${r_start}/\"" -n \
        -o "    [ -d \"" ${GET_TARGET_DEST} -o "/data_\${r_start}/\" ] && continue" -n \
        -o "    [ -d \"" ${GET_TARGET_DEST} -o "/meta_\${r_start}/\" ] && continue" -n \
        -o "    [ -e \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${r_start}" -o ".log\" ] && rm \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${r_start}" -o ".log\"" -n \
				-o "    cat \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"|grep -v \"^\${r_status}|\(.*\)|\(.*\)|\${r_start}|\(.*\)|\(.*\)|\(.*\)|\${r_type}|\" > \"" -o ${OMV_SBACKUP_LOGFILE} -o ".new\"" -n \
  			-o "    mv \"" -o ${OMV_SBACKUP_LOGFILE} -o ".new\" \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
        -o "  done < " -o $OMV_SBACKUP_LOGFILE -n \
        -o "fi" -n \
        -o "SB_TIMEEND=\$(date +\"%s\")" -n \
  			-o "cat \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"|sed \"s/^running|\(.*\)|\(.*\)|\${SB_TIMESTART}||||purge|/0|\1|\2|\${SB_TIMESTART}|\${SB_TIMEEND}|0|0.00|purge|/g\" > \"" -o ${OMV_SBACKUP_LOGFILE} -o ".new\"" -n \
  			-o "mv \"" -o ${OMV_SBACKUP_LOGFILE} -o ".new\" \"" -o ${OMV_SBACKUP_LOGFILE} -o "\"" -n \
  			-o "echo \"Purging completed\" >> \"" -o ${OMV_SBACKUP_SESLOGDIR} -o "/" -v "uuid" -o "_" -o "\${SB_TIMESTART}" -o ".log\"" -n \
  			-o "rm -f \"${runfile}\"" -n \
  			-o "exit 0" -n \
  			${OMV_CONFIG_FILE} | xmlstarlet unesc > "${OMV_SBACKUP_SCRIPTS_DIR}/purge_${uuid}"
  		chmod ${OMV_SBACKUP_SCRIPTS_MASK} "${OMV_SBACKUP_SCRIPTS_DIR}/purge_${uuid}"      
    fi

    ##Generate cron
		xmlstarlet sel -t -m "//services/sbackup/backuplist/backup[uuid='${uuid}']" \
		  -i "job_type = \"purge\" and //services/sbackup/backuplist/backup[uuid=current()/purge_job_uuid]/enable = \"0\"" -o "#" -b \
		  -i "job_type = \"verify\" and //services/sbackup/backuplist/backup[uuid=current()/verify_job_uuid]/enable = \"0\"" -o "#" -b \
			-i "enable = 0 or schedule_enable = 0" -o "#" -b \
      -v "schedule_minute" -o " " -v "schedule_hour" -o " * * " -v "schedule_wday" -o " root" \
      -i "job_type = \"backup\"" -o " ${OMV_SBACKUP_SCRIPTS_DIR}/backup_${uuid}" -b \
      -i "job_type = \"copy\""   -o " ${OMV_SBACKUP_SCRIPTS_DIR}/backup_${uuid}" -b \
      -i "job_type = \"purge\""  -o " ${OMV_SBACKUP_SCRIPTS_DIR}/purge_" -v "purge_job_uuid" -b \
      -i "job_type = \"verify\"" -o " ${OMV_SBACKUP_SCRIPTS_DIR}/verify_" -v "verify_job_uuid" -b \
      ${OMV_CONFIG_FILE} | xmlstarlet unesc >> "${OMV_SBACKUP_CRONFILE}"
    chmod 644 "${OMV_SBACKUP_CRONFILE}"   



done

