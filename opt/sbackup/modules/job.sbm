###########################################################################################
#
#                                         sbackup
#                                       job module
#
###########################################################################################

use strict;
use warnings;
use POSIX qw(strftime ceil);
our %job;
our $p_job;
our $sv_all;
if($p_job || (!$p_job && $sv_all)){
	require "modules/history.sbm";
	return 1;
}

printf "%-1.1s %-20.20s %-18.18s %-16.16s %-16.16s %-30.30s %-30.30s %-14.14s %-3.3s\n",
	"Enabled",
	"Name",
	"Schedule",
	"Status",
	"Last backup",
	"Source",
	"Target",
	"Retention",
	"Versions";
print "============================================================================================================================================================\n";

for my $tmp_job(sort keys %job){
	my $out_enabled;
	if($job{$tmp_job}{'ENABLED'} == 1){$out_enabled = 'E';}else{$out_enabled = 'D';}
	
	##
	## Parse schedule
	##
	my $out_schedule = "";
	if($job{$tmp_job}{'SCHEDULE'}{'-enabled'} ne "1"){
		##Schedule disabled
		$out_schedule = "Disabled";
	}else{
		##Schedule Enabled
		$out_schedule .= $job{$tmp_job}{'SCHEDULE'}{'-time'}." " if $job{$tmp_job}{'SCHEDULE'}{'-time'} ne "";
		my $tmp_noofschedules = 0;
		##Format schedule days
		if($job{$tmp_job}{'SCHEDULE'}{'-day'} ne ""){
  		my @tmp_schedules = split /,| /, $job{$tmp_job}{'SCHEDULE'}{'-day'};
  		$tmp_noofschedules = scalar(@tmp_schedules);
  		$out_schedule .= "Daily" if $tmp_noofschedules == 7;
  		if($tmp_noofschedules < 7){
  			my @wdays = ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday');
  			@wdays = ('Sun','Mon','Tue','Wed','Thu','Fri','Sat') if $tmp_noofschedules > 1;
  			@wdays = ('Su','Mo','Tu','We','Th','Fr','Sa') if $tmp_noofschedules > 3;
  			@wdays = ('S','M','T','W','T','F','S') if $tmp_noofschedules > 4;
  			for(my $i=0;$i < $tmp_noofschedules;$i++){
  				$tmp_schedules[$i] = 0 if $tmp_schedules[$i] eq "Sun";
  				$tmp_schedules[$i] = 1 if $tmp_schedules[$i] eq "Mon";
  				$tmp_schedules[$i] = 2 if $tmp_schedules[$i] eq "Tue";
  				$tmp_schedules[$i] = 3 if $tmp_schedules[$i] eq "Wed";
  				$tmp_schedules[$i] = 4 if $tmp_schedules[$i] eq "Thu";
  				$tmp_schedules[$i] = 5 if $tmp_schedules[$i] eq "Fri";
  				$tmp_schedules[$i] = 6 if $tmp_schedules[$i] eq "Sat";
  				$out_schedule .= $wdays[$tmp_schedules[$i]]."," if defined $wdays[$tmp_schedules[$i]];
  			}
  			$out_schedule = substr($out_schedule, 0, -1) if substr($out_schedule, -1, 1) eq ",";
  		}
  	}
  	if($job{$tmp_job}{'SCHEDULE'}{'-automatic'} ne ""){
  		$out_schedule .= "," if $out_schedule ne "";
  		$out_schedule .= "Daily" if $job{$tmp_job}{'SCHEDULE'}{'-automatic'} eq "daily";
  		$out_schedule .= "Weekly" if $job{$tmp_job}{'SCHEDULE'}{'-automatic'} eq "weekly";
  	}
	}
	
	for my $tmp_job2(keys %job){
		##Check for post job
		if($job{$tmp_job}{'NAME'} eq $job{$tmp_job2}{'POST'}{'-job'}{'-name'}){
			$out_schedule .= ", Post Job";
		}
	}
	
	##
	## Parse status/last completed/versions
	##
	my $out_status = "N/A";
	my $out_versions = 0;
	my $out_lastbackup = "N/A";
	my $out_type = "";
	my $out_error = "";
	my @tmp_history = &get_history($job{$tmp_job}{'NAME'},'status,start,name,type,perf,error');
	for my $tmp(@{$tmp_history[2]}){
		$out_versions++ if $$tmp{'type'} eq "backup" && ($$tmp{'status'} eq "1" || $$tmp{'status'} eq "2" || $$tmp{'status'} eq "3");
		$out_lastbackup = strftime("%a, %d/%m/%G %H:%M", localtime($$tmp{'start'})) if $$tmp{'type'} eq "backup" && ($$tmp{'status'} eq "1" || $$tmp{'status'} eq "2" || $$tmp{'status'} eq "3");
		if($$tmp{'type'} ne "purge"){
			$out_status = $$tmp{'status'};
			$out_error = $$tmp{'error'};
		}
		$out_type = $$tmp{'type'} if $$tmp{'status'} eq "0";
		$out_lastbackup = $$tmp{'perf'} if $$tmp{'status'} eq "0" && $$tmp{'perf'} =~ /%$/;
	}
	#$out_status = "Error:".$out_status if $out_status ne "0" && $out_status ne "N/A";
	$out_status = "Backing up" if $out_status eq "0" && $out_type eq "backup";
	$out_status = "Purging"    if $out_status eq "0" && $out_type eq "purge";
	$out_status = "Copying"    if $out_status eq "0" && $out_type eq "copy";
	$out_status = "Restoring"  if $out_status eq "0" && $out_type eq "restore";
	$out_status = "Migrating"  if $out_status eq "0" && $out_type eq "migration";
	$out_status = "Verifying"  if $out_status eq "0" && $out_type eq "verify";
  $out_status = "Completed"  if $out_status eq "1";
  $out_status = "Completed/Warnings" if $out_status eq "2";
  $out_status = "Completed/Errors"   if $out_status eq "3";
  $out_status = "Completed/Failures" if $out_status eq "4";
  $out_status = "Failed"  if $out_status eq "5";
  $out_status = "Aborted" if $out_status eq "6";
  
	##
	## Parse retention
	##
	my $out_retention;
	$out_retention = "Single version" if $job{$tmp_job}{'SOURCE'}{'-protect'} == 0;
	$out_retention = $job{$tmp_job}{'SOURCE'}{'-protect'}." day" if $job{$tmp_job}{'SOURCE'}{'-protect'} == 1;
	$out_retention = $job{$tmp_job}{'SOURCE'}{'-protect'}." days" if $job{$tmp_job}{'SOURCE'}{'-protect'} > 1;
	
	##
	## Get source and target
	##
	my $source_integ = "";
	my $source_name = "N/A";
	if($job{$tmp_job}{'SOURCE'}{'-type'} eq "omv4" && $job{$tmp_job}{'SOURCE'}{'-path'} ne ""){
  	#require omv4;
  	#import omv4;
  	#$source_name = omv_name_by_uuid(omv_uuid_by_name($job{$tmp_job}{'SOURCE'}{'-path'}));
  	$source_integ = "OMV ";
  	$source_name = $job{$tmp_job}{'SOURCE'}{'-path'};
  	
	}
	
	my $target_integ = "";
	my $target_name = "N/A";
	if($job{$tmp_job}{'TARGET'}{'-type'} eq "omv4" && $job{$tmp_job}{'TARGET'}{'-path'} ne ""){
		#require omv4;
		#import omv4;
		#$target_name = omv_name_by_uuid(omv_uuid_by_name($job{$tmp_job}{'TARGET'}{'-path'}));
		$target_integ = "OMV ";
  	$target_name = $job{$tmp_job}{'TARGET'}{'-path'};
	}
	
	##
	## Output
	##
	printf "%-1.1s %-20.20s %-18.18s %-16.16s %-16.16s %-30.30s %-30.30s %-14.14s %-3.3s\n",
		$out_enabled,
		$job{$tmp_job}{'NAME'},
		$out_schedule,
		$out_status,
		$out_lastbackup,
		$source_integ.$source_name,
		$target_integ.$target_name,
		$out_retention,
		$out_versions;
		
}

return 1;