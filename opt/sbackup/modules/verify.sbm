###########################################################################################
#
#                                         sbackup
#                                      verify module
#
###########################################################################################
use strict;
use warnings;
use POSIX qw(strftime);
use Fcntl ':mode';

our ($p_job);
our %job;
our $p_days;
our $p_version;
our $sv_background;

##
## Check parameters
##
my $param_ok = 0;
$param_ok = job_exists($p_job) if $p_job;
if($p_job && $param_ok == 0){
	print STDERR "Error: Job \"$p_job\" does not exists.\n\nAvailable jobs:\n";
	for my $tmp_job(list_jobs()){
		print STDERR "\t$tmp_job\n";
	}
	f_output("ERROR","",1);
}

my $tmp_version;
if($p_version){
  $tmp_version = $p_version;
  f_output("ERROR","Invalid version.",1) if $p_version !~ /^(\d{4})\/(\d{2})\/(\d{2})\-(\d{2})(\d{2})(\d{2})$/;
  $p_version = mktime($6,$5,$4,$3,$2 - 1,$1 - 1900);
  my @tmp = &get_history($p_job,'status,name,start,end,error,size,perf,type','start=='.$p_version);
  f_output("ERROR","Invalid version.",1) if !$tmp[0];
}

if(!$sv_background && !$::PREVIEWMODE){
	my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
	f_output("ERROR",$result,1) if $result;
	my $tmp = "";
	$tmp = ' -version '.$tmp_version if $tmp_version;
	system('echo "'.$BINPATH.'/sbackup -verify '.$p_job.$tmp.' -background >/dev/null"|at now >/dev/null 2>&1');
	f_output("ERROR","Verify failed to start.",1) if $? != 0;
	print "Verify started successfully.\n\n";
	exit 0;
}

##
## Set variables
##
our $SB_TIMESTART = time();
my $SB_TIMEEND;
my $SB_ECODE = "";
our $SB_ERRORLEVEL = 1;
our $versionlogfile = $VERSIONLOGPATH.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".log";

##
## job_failed
##
sub job_failed {
	my $msg = shift;
	$SB_TIMEEND = time();
	print STDERR "Error: $msg\n";
	version_log('critical','verify',$backupserver_fqdn,"Verify job failed with error:\n$msg");
	$msg =~ s/^([^\n]+)//;
	$msg = $1;
	update_history($p_job,"status=5,end=".$SB_TIMEEND.",error=".$msg.",perf=","status==0,type==verify,start==".$SB_TIMESTART);
	rm_runfile($p_job);
	
  if($SB_ERRORLEVEL >= 3){
  	if(!defined &::notification){
    	require notifications;
    	import notifications;
    	notification("Verify job failed", $p_job, $SB_TIMESTART,"");
  	}
  }
	
	exit 1;
}

##
## Pre-initialization
##
&f_output("DEBUG","Starting verify $job{$p_job}{'NAME'}");
my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
f_output("ERROR",$result,1) if $result;

set_runfile($p_job,"type=verify,status=0,epoch=".$SB_TIMESTART.",pid=".$$);
insert_history($p_job,"type=verify,status=0,name=".$job{$p_job}{'NAME'}.",start=".$SB_TIMESTART);
version_log('normal','verify',$backupserver_fqdn,"Starting verify job \"$job{$p_job}{'NAME'}\"\nJob version: ".strftime("%G/%m/%d-%H%M%S", localtime($SB_TIMESTART)));

##
## Preexec
##
if($job{$p_job}{'POST'}{'-preexec'}){
	version_log('normal','verify',$backupserver_fqdn,"Starting preexec: \"".$job{$p_job}{'POST'}{'-preexec'}."\"");
	$job{$p_job}{'POST'}{'-preexec'} =~ /([^\/\\]+)$/;
	$job{$p_job}{'POST'}{'-preexec'} = $1;
  if(open(my $fh, "-|", 'cd '.$USERSCRIPTSPATH.';export JOB_NAME='.$job{$p_job}{'NAME'}.';export JOB_TYPE=verify;export STATUS='.$SB_ERRORLEVEL.';export START_TIME='.$SB_TIMESTART.';./'.$job{$p_job}{'POST'}{'-preexec'}.' 2>&1')){
    while (my $line = <$fh>){
    	chomp($line);
    	append_log($versionlogfile, $line);
    	print $line."\n" if $::PREVIEWMODE;
    }
    close($fh);
    if($? != 0){
      my $msg = "";
      $msg = "\nFile is not executable." if ($? / 256) == 126;
      $msg = "\nFile not found." if ($? / 256) eq 127;
      ::job_failed("Preexec failed with exit code ".($? / 256).".".$msg);
  	}
  }else{
  	::job_failed("Preexec failed to start.");
  }
  version_log('normal','verify',$backupserver_fqdn,"Preexec completed successfully.");
}

##
## Get integ target
##
sub get_integ_path{
	my ($type,$path)=@_;
	my @returncodes;
	$returncodes[0] = 0;
	
	## OMV4
  if($type eq "omv4"){
  	&f_output("DEBUG","Integration: OMV4");
  	require omv4;
  	import omv4;
  	$returncodes[2]{'integ'} = "OMV ";
  	$returncodes[2]{'path'} = omv_prepare_sharedfolder($path);
  	if($returncodes[2]{'path'} =~ /^Error:(.*)$/){
  		version_log('critical','omv4',$backupserver_fqdn,"OMV4 reported error:\n$1");
  		job_failed("$1");
  	}
  	$returncodes[0] = 1;
  	version_log('normal','omv4',$backupserver_fqdn,"OMV4 volume found.\nShared folder location: $returncodes[2]{'path'}");
  }
  
  ## Filesystem
  if($type eq "filesystem"){
  	&f_output("DEBUG","Integration: filesystem");
  	$returncodes[2]{'path'} = $path;
  	if($returncodes[2]{'path'} !~  /^\//){job_failed("$1");}
  	job_failed("Backup path not found.") if !-d $returncodes[2]{'path'};
  	$returncodes[0] = 1;
  }

	return @returncodes;
}

##
## Get target
##
my $target_integ = "";
my $target_path = "";

my @target_result = get_integ_path($job{$p_job}{'TARGET'}{'-type'}, $job{$p_job}{'TARGET'}{'-path'});
if($target_result[0]){
	$target_integ = $target_result[2]{'integ'};
	$target_path = $target_result[2]{'path'};
}

## Create job repository on in target path
$target_path .= $slash."sbackup_".$p_job;
if(!-d $target_path){
	system($cmd_mkdir.' '.$target_path.' 2>&1');
	job_failed("Backup target path creation failed.") if $? != 0;
}
&f_output("DEBUG","Target path: \"$target_path\"");

##
## Get list of all versions
##
my $out_perm  = "";
my $out_owner = "";
my $out_group = "";
my $out_size  = "";
my $out_time  = "";
my $out_path  = "";
my @cat_dirs = ();
my @cat_files = ();
my @os_ownerlist = ();
my @os_grouplist = ();
my @catalog = ();

sub traverse_cat {
	my ($cat_dirid, $append_path) = @_;
	
  ## Get files in this directory
  my $i = -1;
  if(defined $cat_files[$cat_dirid]){
   	for(@{$cat_files[$cat_dirid]}){
    	$i++;
    	next if not defined $cat_files[$cat_dirid][$i];

    	$out_time = $cat_files[$cat_dirid][$i][2];
      $out_perm = $cat_files[$cat_dirid][$i][3];
    	$out_owner = $cat_files[$cat_dirid][$i][4];
    	$out_group = $cat_files[$cat_dirid][$i][5];
    	$out_path = $append_path."/".$cat_files[$cat_dirid][$i][0];
    	$out_size = $cat_files[$cat_dirid][$i][1];
    	
    	my @tmp = ($out_path,$out_perm,$out_owner,$out_group,$out_size,$out_time);
  		push @catalog,\@tmp;
		}
	}
	
	$i = -1;
	if(defined $cat_dirs[$cat_dirid]){
  	for(@{$cat_dirs[$cat_dirid]}){
  		$i++;
  		
    	$out_perm = $cat_dirs[$cat_dirid][$i][2];
    	$out_owner = $cat_dirs[$cat_dirid][$i][3];
    	$out_group = $cat_dirs[$cat_dirid][$i][4];
    	$out_path = $append_path."/".$cat_dirs[$cat_dirid][$i][1]."/";
  		
  		my @tmp = ($out_path,$out_perm,$out_owner,$out_group,0,0);
  		push @catalog,\@tmp;
      	
      ## Go into a subdirectory
      traverse_cat($cat_dirs[$cat_dirid][$i][0],$append_path."/".$cat_dirs[$cat_dirid][$i][1]);
  	}
  }
	return;
}

my @output = &get_history($p_job,'status,start','type==backup');
for my $tmp(@{$output[2]}){
	if($$tmp{'status'} =~ /^\d+$/ && ($$tmp{'status'} eq "1" || $$tmp{'status'} eq "2" || $$tmp{'status'} eq "3")){
		version_log('normal','verify',$::backupserver_fqdn,"Starting verification for backup job version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'})));
		my $version = $$tmp{'start'};
		my $version_error = 0;
		
    if(!-d "$target_path/data_$version/"){
    	version_log('major','verify',$::backupserver_fqdn,"Data store missing from version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'})));
    }
    if(!-d "$target_path/meta_$version/"){
    	version_log('major','verify',$::backupserver_fqdn,"Meta store missing from version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'})));
    }
    
    @cat_dirs = ();
    @{$cat_dirs[0]} = ();
    for my $line(read_log($::CATALOGPATH.$p_job."_".$version.".dirs")){
    	chomp($line);
    	my @val = split(/\|/,$line);
    	@{$cat_dirs[$val[0]]} = () if not defined $cat_dirs[$val[0]];
      my @tmp = ($val[1], $val[2], $val[3], $val[4], $val[5]);
      push @{$cat_dirs[$val[0]]},\@tmp;
    }

    @cat_files = ();
    for my $line(read_log($::CATALOGPATH.$p_job."_".$version.".files")){
    	chomp($line);
    	my @val = split(/\|/,$line);
    	@{$cat_files[$val[0]]} = () if not defined $cat_files[$val[0]];
      my @tmp = ($val[1], $val[2], $val[3], $val[4], $val[5], $val[6]);
      push @{$cat_files[$val[0]]},\@tmp;
    }

    @os_ownerlist = ();
    for my $line(read_log($::CATALOGPATH.$p_job."_".$version.".owners")){
    	chomp($line);
    	my @val = split(/\|/,$line);
    	$os_ownerlist[$val[0]] = $val[1];
    }

    @os_grouplist = ();
    for my $line(read_log($::CATALOGPATH.$p_job."_".$version.".groups")){
    	chomp($line);
    	my @val = split(/\|/,$line);
    	$os_grouplist[$val[0]] = $val[1];
    }

    @catalog = ();
    traverse_cat(0,"");
    version_log('normal','verify',$::backupserver_fqdn,"Checking ".(0+@catalog)." objects");
    #print "\n\n";
    my ($object_path,$object_perm,$object_owner,$object_group,$object_size,$object_time,$object_type);
    for my $tmp_cat(@catalog){
    	$object_path = $$tmp_cat[0];
    	$object_perm = $$tmp_cat[1];
    	$object_owner = $$tmp_cat[2];
    	$object_group = $$tmp_cat[3];
    	$object_size = $$tmp_cat[4];
    	$object_time = $$tmp_cat[5];
    	$object_type = "File";
    	$object_type = "Directory" if $object_path =~ /\/$/;
    	
    	if($object_type eq "File" && !-f "$target_path/data_$version/$object_path"){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type is missing from version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"");
    	}
    	if($object_type eq "Directory" && !-d "$target_path/data_$version/$object_path"){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type is missing from version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"");
    	}
    	
    	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat("$target_path/data_$version/$object_path");
    	$mode = sprintf("%04o", $mode &07777);
    	$mode =~ s/^\d//;
    	
    	if($mode ne $object_perm){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type permissions has been corrupted in version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"\n$mode ne $object_perm");
    		$version_error = 1;
    	}
    	
    	if($uid ne $object_owner){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type owner has been corrupted in version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"");
    		$version_error = 1;
    	}
    	
    	if($gid ne $object_group){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type group has been corrupted in version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"");
    		$version_error = 1;
    	}
    	
    	if($object_type eq "File" && $size ne $object_size){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type size has been corrupted or modified within datastore in version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"");
    		$version_error = 1;
    	}
    	
    	if($object_type eq "File" && $mtime ne $object_time){
    		version_log('warning','verify',$::backupserver_fqdn,"$object_type time has been corrupted or modified within datastore in version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))."\n\"$object_path\"");
    		$version_error = 1;
    	}
    	
    }
    
    if($version_error == 0){
    	version_log('normal','verify',$::backupserver_fqdn,"Completed verification for backup job version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'})));
    }else{
    	version_log('major','verify',$::backupserver_fqdn,"Verification for backup job version ".strftime("%G/%m/%d-%H%M%S", localtime($$tmp{'start'}))." failed.");
    }
    
	}
}

$SB_TIMEEND = time();

##
## Postexec
##
if($job{$p_job}{'POST'}{'-postexec'}){
	version_log('normal','verify',$backupserver_fqdn,"Starting postexec: \"".$job{$p_job}{'POST'}{'-postexec'}."\"");
	$job{$p_job}{'POST'}{'-postexec'} =~ /([^\/\\]+)$/;
	$job{$p_job}{'POST'}{'-postexec'} = $1;
	if(open(my $fh, "-|", 'cd '.$USERSCRIPTSPATH.';export JOB_NAME='.$job{$p_job}{'NAME'}.';export JOB_TYPE=verify;export STATUS='.$SB_ERRORLEVEL.';export START_TIME='.$SB_TIMESTART.';export END_TIME='.$SB_TIMEEND.';./'.$job{$p_job}{'POST'}{'-postexec'}.' 2>&1')){
    while (my $line = <$fh>){
    	chomp($line);
    	append_log($versionlogfile, $line);
    	print $line."\n" if $::PREVIEWMODE;
    }
    close($fh);
    if($? != 0){
      my $msg = "";
      $msg = "\nFile is not executable." if ($? / 256) == 126;
      $msg = "\nFile not found." if ($? / 256) eq 127;
      ::job_failed("Postexec failed with exit code ".($? / 256).".".$msg);
  	}
  }else{
  	::job_failed("Postexec failed to start.");
  }
  version_log('normal','verify',$backupserver_fqdn,"Postexec completed successfully.");
}

version_log('normal','verify',$backupserver_fqdn,"Verify job completed successfully.") if $SB_ERRORLEVEL eq "1";
version_log('normal','verify',$backupserver_fqdn,"Verify job completed with warnings.") if $SB_ERRORLEVEL eq "2";
version_log('normal','verify',$backupserver_fqdn,"Verify job completed with errors.") if $SB_ERRORLEVEL eq "3";
version_log('normal','verify',$backupserver_fqdn,"Verify job completed with failures.") if $SB_ERRORLEVEL eq "4";
version_log('normal','verify',$backupserver_fqdn,"Verify job failed.") if $SB_ERRORLEVEL eq "5";
version_log('normal','verify',$backupserver_fqdn,"Verify job was aborted.") if $SB_ERRORLEVEL eq "6";
update_history($p_job,"status=".$SB_ERRORLEVEL.",error=".$SB_ECODE.",end=".$SB_TIMEEND,"status==0,type==verify,start==".$SB_TIMESTART);
rm_runfile($p_job);

if($SB_ERRORLEVEL >= 3){
	if(!defined &::notification){
  	require notifications;
  	import notifications;
  	notification("Verify job failed", $p_job, $SB_TIMESTART,"");
	}
}

return 1;