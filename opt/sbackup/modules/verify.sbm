###########################################################################################
#
#                                         sbackup
#                                      verify module
#
###########################################################################################
use strict;
use warnings;
use POSIX qw(strftime);

our ($p_job);
our %job;
our $p_days;
our $p_version;
our $sv_background;

##
## Check parameters
##
my $param_ok = 0;
$param_ok = job_exists($p_job) if $p_job;
if($p_job && $param_ok == 0){
	print STDERR "Error: Job \"$p_job\" does not exists.\n\nAvailable jobs:\n";
	for my $tmp_job(list_jobs()){
		print STDERR "\t$tmp_job\n";
	}
	f_output("ERROR","",1);
}

my $tmp_version;
if($p_version){
  $tmp_version = $p_version;
  f_output("ERROR","Invalid version.",1) if $p_version !~ /^(\d{4})\/(\d{2})\/(\d{2})\-(\d{2})(\d{2})(\d{2})$/;
  $p_version = mktime($6,$5,$4,$3,$2 - 1,$1 - 1900);
  my @tmp = &get_history($p_job,'status,name,start,end,error,size,perf,type','start=='.$p_version);
  f_output("ERROR","Invalid version.",1) if !$tmp[0];
}

if(!$sv_background && !$::DEBUGMODE){
	my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
	f_output("ERROR",$result,1) if $result;
	my $tmp = "";
	$tmp = ' -version '.$tmp_version if $tmp_version;
	system('echo "'.$BINPATH.'/sbackup -verify '.$p_job.$tmp.' -background >/dev/null"|at now >/dev/null 2>&1');
	f_output("ERROR","Verify failed to start.",1) if $? != 0;
	print "Verify started successfully.\n\n";
	exit 0;
}

##
## Set variables
##
our $SB_TIMESTART = time();
my $SB_TIMEEND;
my $SB_ECODE = "";
our $SB_ERRORLEVEL = 1;
our $sessionlogfile = $SESSIONLOGPATH.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".log";

##
## job_failed
##
sub job_failed {
	my $msg = shift;
	$SB_TIMEEND = time();
	print STDERR "Error: $msg\n";
	version_log('critical','verify',$backupserver_fqdn,"Verify job failed with error:\n$msg");
	$msg =~ s/^([^\n]+)//;
	$msg = $1;
	update_history($p_job,"status=5,end=".$SB_TIMEEND.",error=".$msg.",perf=","status==0,type==verify,start==".$SB_TIMESTART);
	rm_runfile($p_job);
	exit 1;
}

##
## Pre-initialization
##
&f_output("DEBUG","Starting verify $job{$p_job}{'NAME'}");
my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
f_output("ERROR",$result,1) if $result;

set_runfile($p_job,"type=verify,status=0,epoch=".$SB_TIMESTART.",pid=".$$);
insert_history($p_job,"type=verify,status=0,name=".$job{$p_job}{'NAME'}.",start=".$SB_TIMESTART);
version_log('normal','verify',$backupserver_fqdn,"Starting verify job \"$job{$p_job}{'NAME'}\"\nJob version: ".strftime("%G/%m/%d-%H%M%S", localtime($SB_TIMESTART)));

##
## Preexec
##
if($job{$p_job}{'POST'}{'-preexec'}){
	version_log('normal','verify',$backupserver_fqdn,"Starting preexec: \"".$job{$p_job}{'POST'}{'-preexec'}."\"");
	$job{$p_job}{'POST'}{'-preexec'} =~ /([^\/\\]+)$/;
	$job{$p_job}{'POST'}{'-preexec'} = $1;
  if(open(my $fh, "-|", 'cd '.$USERSCRIPTSPATH.';export JOB_NAME='.$job{$p_job}{'NAME'}.';export JOB_TYPE=verify;export STATUS='.$SB_ERRORLEVEL.';export START_TIME='.$SB_TIMESTART.';./'.$job{$p_job}{'POST'}{'-preexec'}.' 2>&1')){
    while (my $line = <$fh>){
    	chomp($line);
    	append_log($sessionlogfile, $line);
    }
    close($fh);
    if($? != 0){
      my $msg = "";
      $msg = "\nFile is not executable." if ($? / 256) == 126;
      $msg = "\nFile not found." if ($? / 256) eq 127;
      ::job_failed("Preexec failed with exit code ".($? / 256).".".$msg);
  	}
  }else{
  	::job_failed("Preexec failed to start.");
  }
  version_log('normal','verify',$backupserver_fqdn,"Preexec completed successfully.");
}

##
## Verify start
##









$SB_TIMEEND = time();

##
## Postexec
##
if($job{$p_job}{'POST'}{'-postexec'}){
	version_log('normal','verify',$backupserver_fqdn,"Starting postexec: \"".$job{$p_job}{'POST'}{'-postexec'}."\"");
	$job{$p_job}{'POST'}{'-postexec'} =~ /([^\/\\]+)$/;
	$job{$p_job}{'POST'}{'-postexec'} = $1;
	if(open(my $fh, "-|", 'cd '.$USERSCRIPTSPATH.';export JOB_NAME='.$job{$p_job}{'NAME'}.';export JOB_TYPE=verify;export STATUS='.$SB_ERRORLEVEL.';export START_TIME='.$SB_TIMESTART.';export END_TIME='.$SB_TIMEEND.';./'.$job{$p_job}{'POST'}{'-postexec'}.' 2>&1')){
    while (my $line = <$fh>){
    	chomp($line);
    	append_log($sessionlogfile, $line);
    }
    close($fh);
    if($? != 0){
      my $msg = "";
      $msg = "\nFile is not executable." if ($? / 256) == 126;
      $msg = "\nFile not found." if ($? / 256) eq 127;
      ::job_failed("Postexec failed with exit code ".($? / 256).".".$msg);
  	}
  }else{
  	::job_failed("Postexec failed to start.");
  }
  version_log('normal','verify',$backupserver_fqdn,"Postexec completed successfully.");
}

version_log('normal','verify',$backupserver_fqdn,"Verify job completed successfully.") if $SB_ERRORLEVEL eq "1";
version_log('normal','verify',$backupserver_fqdn,"Verify job completed with warnings.") if $SB_ERRORLEVEL eq "2";
version_log('normal','verify',$backupserver_fqdn,"Verify job completed with errors.") if $SB_ERRORLEVEL eq "3";
version_log('normal','verify',$backupserver_fqdn,"Verify job completed with failures.") if $SB_ERRORLEVEL eq "4";
version_log('normal','verify',$backupserver_fqdn,"Verify job failed.") if $SB_ERRORLEVEL eq "5";
version_log('normal','verify',$backupserver_fqdn,"Verify job was aborted.") if $SB_ERRORLEVEL eq "6";
update_history($p_job,"status=".$SB_ERRORLEVEL.",error=".$SB_ECODE.",end=".$SB_TIMEEND,"status==0,type==verify,start==".$SB_TIMESTART);
rm_runfile($p_job);


return 1;