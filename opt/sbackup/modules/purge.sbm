###########################################################################################
#
#                                         sbackup
#                                      purge module
#
###########################################################################################
use strict;
use warnings;
use POSIX qw(strftime);

our ($p_job);
our %job;
our $p_days;
our $sv_background;

##
## Check parameters
##
my $param_ok = 0;
$param_ok = job_exists($p_job) if $p_job;
if($param_ok == 0){
	print STDERR "Error: Job \"$p_job\" does not exists.\n\n" if $p_job;
	print STDERR "Error: Job not specified.\n\n" if !$p_job;
	print STDERR "Available jobs:\n";
	for my $tmp_job(list_jobs()){
		print STDERR "\t$tmp_job\n";
	}
	f_output("ERROR","",1);
}

if(!$sv_background && !$::DEBUGMODE){
	my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
	f_output("ERROR",$result,1) if $result;
	my $tmp = "";
	$tmp = "-days $p_days" if defined($p_days) && ($p_days eq "0" || $p_days > 0);
	system('echo "'.$BINPATH.'/sbackup -purge '.$p_job.' '.$tmp.' -background >/dev/null"|at now >/dev/null 2>&1');
	f_output("ERROR","Purge failed to start.",1) if $? != 0;
	print "Purge started successfully.\n\n";
	exit 0;
}

##
## Set variables
##
our $SB_TIMESTART = time();
my $SB_TIMEEND;
my $SB_ECODE = "";
our $SB_ERRORLEVEL = 1;
our $sessionlogfile = $SESSIONLOGPATH.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".log";

##
## job_failed
##
sub job_failed {
	my $msg = shift;
	$SB_TIMEEND = time();
	version_log('critical','purge',$backupserver_fqdn,"Purge job failed with error:\n$msg");
	$msg =~ s/^([^\n]+)//;
	$msg = $1;
	update_history($p_job,"status=5,end=".$SB_TIMEEND.",error=".$msg.",perf=","status==0,type==purge,start==".$SB_TIMESTART);
	rm_runfile($p_job);
	
  if($SB_ERRORLEVEL >= 3){
  	if(!defined &::notification){
    	require notifications;
    	import notifications;
    	notification("Purge job failed", $p_job, $SB_TIMESTART,"");
  	}
  }
	
	exit 0;
}

##
## Pre-initialization
##
&f_output("DEBUG","Starting purge $job{$p_job}{'NAME'}");
my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
#f_output("ERROR",$result,1) if $result;
exit 0 if $result;

set_runfile($p_job,"type=purge,status=0,epoch=".$SB_TIMESTART.",pid=".$$);
insert_history($p_job,"type=purge,status=0,name=".$job{$p_job}{'NAME'}.",start=".$SB_TIMESTART);
version_log('normal','purge',$backupserver_fqdn,"Starting purge job \"$job{$p_job}{'NAME'}\"\nJob version: ".strftime("%G/%m/%d-%H%M%S", localtime($SB_TIMESTART)));

##
## Preexec
##
if($job{$p_job}{'POST'}{'-preexec'}){
	version_log('normal','purge',$backupserver_fqdn,"Starting preexec: \"".$job{$p_job}{'POST'}{'-preexec'}."\"");
	$job{$p_job}{'POST'}{'-preexec'} =~ /([^\/\\]+)$/;
	$job{$p_job}{'POST'}{'-preexec'} = $1;
  if(open(my $fh, "-|", 'cd '.$USERSCRIPTSPATH.';export JOB_NAME='.$job{$p_job}{'NAME'}.';export JOB_TYPE=purge;export STATUS='.$SB_ERRORLEVEL.';export START_TIME='.$SB_TIMESTART.';./'.$job{$p_job}{'POST'}{'-preexec'}.' 2>&1')){
    while (my $line = <$fh>){
    	chomp($line);
    	append_log($sessionlogfile, $line);
    }
    close($fh);
    if($? != 0){
      my $msg = "";
      $msg = "\nFile is not executable." if ($? / 256) == 126;
      $msg = "\nFile not found." if ($? / 256) eq 127;
      ::job_failed("Preexec failed with exit code ".($? / 256).".".$msg);
  	}
  }else{
  	::job_failed("Preexec failed to start.");
  }
  version_log('normal','purge',$backupserver_fqdn,"Preexec completed successfully.");
}

##
## Get integ target
##
sub get_integ_path{
	my ($type,$path)=@_;
	my @returncodes;
	$returncodes[0] = 0;
	
	## OMV4
  if($type eq "omv4"){
  	&f_output("DEBUG","Integration: OMV4");
  	require omv4;
  	import omv4;
  	$returncodes[2]{'integ'} = "OMV ";
  	$returncodes[2]{'path'} = omv_prepare_sharedfolder($path);
  	if($returncodes[2]{'path'} =~ /^Error:(.*)$/){
  		version_log('critical','omv4',$backupserver_fqdn,"OMV4 reported error:\n$1");
  		job_failed("$1");
  	}
  	$returncodes[0] = 1;
  	version_log('normal','omv4',$backupserver_fqdn,"OMV4 volume found.\nShared folder location: $returncodes[2]{'path'}");
  }
  
  ## Filesystem
  if($type eq "filesystem"){
  	&f_output("DEBUG","Integration: filesystem");
  	$returncodes[2]{'path'} = $path;
  	if($returncodes[2]{'path'} !~  /^\//){job_failed("$1");}
  	job_failed("Backup path not found.") if !-d $returncodes[2]{'path'};
  	$returncodes[0] = 1;
  }

	return @returncodes;
}

##
## Get target
##
my $target_integ = "";
my $target_path = "";

my @target_result = get_integ_path($job{$p_job}{'TARGET'}{'-type'}, $job{$p_job}{'TARGET'}{'-path'});
if($target_result[0]){
	$target_integ = $target_result[2]{'integ'};
	$target_path = $target_result[2]{'path'};
}

## Create job repository on in target path
$target_path .= $slash."sbackup_".$p_job;
if(!-d $target_path){
	system($cmd_mkdir.' '.$target_path.' 2>&1');
	job_failed("Backup target path creation failed.") if $? != 0;
}
&f_output("DEBUG","Target path: \"$target_path\"");

##
## Check backup history
##
my $data_purged = 0;
if(-f $VARPATH.'history_'.$p_job){
	##Get backup status from history
	&f_output("DEBUG","History log found, checking history.");
	my $LAST_COMPLETED_STAMP = 0;
  my @output = &get_history($p_job,'status,start,type');
  for my $tmp(@{$output[2]}){
  	next if $$tmp{'start'} eq $SB_TIMESTART;
  	if($$tmp{'type'} eq "backup" && $$tmp{'start'} ne "" && $$tmp{'start'} > 100 && -d $target_path.$slash."data_".$$tmp{'start'}){
  		$LAST_COMPLETED_STAMP = $$tmp{'start'} if $$tmp{'status'} =~ /^\d+$/ && ($$tmp{'status'} eq "1" || $$tmp{'status'} eq "2" || $$tmp{'status'} eq "3");
  	}
  }
  &f_output("DEBUG","Last completed version: ".$LAST_COMPLETED_STAMP) if $LAST_COMPLETED_STAMP;
  my $DATA_PROTECTION = $job{$p_job}{'SOURCE'}{'-protect'};
  $DATA_PROTECTION = $p_days if (defined $p_days && ($p_days eq "0" || $p_days > 0));
  &f_output("DEBUG","Purge set to: ".$DATA_PROTECTION);
  
  ##Set admin job type protection
  my $ADMIN_PROTECTION = 3;
  $ADMIN_PROTECTION += $DATA_PROTECTION if $DATA_PROTECTION && $DATA_PROTECTION > 0;
  &f_output("DEBUG","Admin type job protection: $ADMIN_PROTECTION.");
  version_log('normal','purge',$backupserver_fqdn,"Data protection: $DATA_PROTECTION\nAdmin job protection: $ADMIN_PROTECTION");
  version_log('normal','purge',$backupserver_fqdn,"Starting purge...");
  for my $tmp(@{$output[2]}){
  	&f_output("DEBUG","Found $$tmp{'type'} version $$tmp{'start'} with status $$tmp{'status'}.");
  	my $obsolete = 0;
  	if($LAST_COMPLETED_STAMP && $$tmp{'start'} eq $LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Last successful backup, skipping.");
  		next;
  	}
  	if($LAST_COMPLETED_STAMP && $$tmp{'start'} > $LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Newer then last successful backup, skipping.");
  		next;
  	}
  	##Purge versions
  	if($$tmp{'type'} eq "purge" && ($$tmp{'start'} < ($SB_TIMESTART - ($ADMIN_PROTECTION * 86400)))){
  		&f_output("DEBUG","Purge session for removal.");
  		$obsolete = 1;
  	}
  	##Failed backup versions
  	if($$tmp{'type'} eq "backup" && ($$tmp{'status'} eq "4" || $$tmp{'status'} eq "5" || $$tmp{'status'} eq "6") && ($$tmp{'start'} < ( $SB_TIMESTART - ($ADMIN_PROTECTION * 86400)))){
  		&f_output("DEBUG","Failed backup session for removal.");
  		$obsolete = 1;
  	}
  	##Completed backup versions
  	if($$tmp{'type'} eq "backup" && ($$tmp{'status'} eq "1" || $$tmp{'status'} eq "2" || $$tmp{'status'} eq "3") && ($$tmp{'start'} < ( $SB_TIMESTART - ($DATA_PROTECTION * 86400)))){
  		&f_output("DEBUG","Obsolete backup session for removal.");
  		$obsolete = 1;
  	}
  	
  	##Completed backup versions with 0 protection (keep last version)
  	if($$tmp{'type'} eq "backup" && $DATA_PROTECTION eq "0" && $$tmp{'start'} < $LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Obsolete backup session for removal.");
  		$obsolete = 1;
  	}
  	
  	##Remove version
  	if($obsolete == 1){
  		&f_output("DEBUG","Removing version $$tmp{'start'}.");
  		append_log($sessionlogfile,"Removing version $$tmp{'start'}\n");
  		if(-d $target_path.$slash."data_".$$tmp{'start'}){
  			&f_output("DEBUG","Found data.");
  			system("$cmd_rm \"".$target_path.$slash."data_".$$tmp{'start'}."\"") if !$::SIMULATEMODE;
  		}
  		if(-d $target_path.$slash."meta_".$$tmp{'start'}){
  			&f_output("DEBUG","Found meta.");
  			system("$cmd_rm \"".$target_path.$slash."meta_".$$tmp{'start'}."\"") if !$::SIMULATEMODE;
  		}
  		if(-f $SESSIONLOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".log"){
  			&f_output("DEBUG","Found log.");
  			system("$cmd_rm \"".$SESSIONLOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".log\"") if !$::SIMULATEMODE;
  		}
  		if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".dirs"){
  			&f_output("DEBUG","Found dir catalog.");
  			system("$cmd_rm \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".dirs\"") if !$::SIMULATEMODE;
  		}
  		if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".files"){
  			&f_output("DEBUG","Found file catalog.");
  			system("$cmd_rm \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".files\"") if !$::SIMULATEMODE;
  		}
  		if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".owners"){
  			&f_output("DEBUG","Found file catalog.");
  			system("$cmd_rm \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".owners\"") if !$::SIMULATEMODE;
  		}
  		if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".groups"){
  			&f_output("DEBUG","Found file catalog.");
  			system("$cmd_rm \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$$tmp{'start'}.".groups\"") if !$::SIMULATEMODE;
  		}
  		
  		delete_history($p_job,"start==".$$tmp{'start'});
  		$data_purged = 1;
  	}else{
  		&f_output("DEBUG","Keeping version $$tmp{'start'}.");
  	}
  }
}else{
	&f_output("DEBUG","History log not found.");
	version_log('warning','purge',$backupserver_fqdn,"Unable to start purge, job history not found.");
	$SB_ECODE = 'No history';
}

if($data_purged){
	append_log($sessionlogfile,"\n");
}else{
	version_log('normal','purge',$backupserver_fqdn,"Nothing purged, no expired data found.");
}

$SB_TIMEEND = time();

##
## Postexec
##
if($job{$p_job}{'POST'}{'-postexec'}){
	version_log('normal','purge',$backupserver_fqdn,"Starting postexec: \"".$job{$p_job}{'POST'}{'-postexec'}."\"");
	$job{$p_job}{'POST'}{'-postexec'} =~ /([^\/\\]+)$/;
	$job{$p_job}{'POST'}{'-postexec'} = $1;
	if(open(my $fh, "-|", 'cd '.$USERSCRIPTSPATH.';export JOB_NAME='.$job{$p_job}{'NAME'}.';export JOB_TYPE=purge;export STATUS='.$SB_ERRORLEVEL.';export START_TIME='.$SB_TIMESTART.';export END_TIME='.$SB_TIMEEND.';./'.$job{$p_job}{'POST'}{'-postexec'}.' 2>&1')){
    while (my $line = <$fh>){
    	chomp($line);
    	append_log($sessionlogfile, $line);
    }
    close($fh);
    if($? != 0){
      my $msg = "";
      $msg = "\nFile is not executable." if ($? / 256) == 126;
      $msg = "\nFile not found." if ($? / 256) eq 127;
      ::job_failed("Postexec failed with exit code ".($? / 256).".".$msg);
  	}
  }else{
  	::job_failed("Postexec failed to start.");
  }
  version_log('normal','purge',$backupserver_fqdn,"Postexec completed successfully.");
}

version_log('normal','purge',$backupserver_fqdn,"Purge job completed successfully.") if $SB_ERRORLEVEL eq "1";
version_log('normal','purge',$backupserver_fqdn,"Purge job completed with warnings.") if $SB_ERRORLEVEL eq "2";
version_log('normal','purge',$backupserver_fqdn,"Purge job completed with errors.") if $SB_ERRORLEVEL eq "3";
version_log('normal','purge',$backupserver_fqdn,"Purge job completed with failures.") if $SB_ERRORLEVEL eq "4";
version_log('normal','purge',$backupserver_fqdn,"Purge job failed.") if $SB_ERRORLEVEL eq "5";
version_log('normal','purge',$backupserver_fqdn,"Purge job was aborted.") if $SB_ERRORLEVEL eq "6";
update_history($p_job,"status=".$SB_ERRORLEVEL.",error=".$SB_ECODE.",end=".$SB_TIMEEND,"status==0,type==purge,start==".$SB_TIMESTART);
rm_runfile($p_job);

if($SB_ERRORLEVEL >= 3){
	if(!defined &::notification){
  	require notifications;
  	import notifications;
  	notification("Purge job failed", $p_job, $SB_TIMESTART,"");
	}
}

return 1;