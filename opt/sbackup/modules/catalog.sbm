###########################################################################################
#
#                                         sbackup
#                                      catalog module
#
###########################################################################################
use strict;
use warnings;
use POSIX qw(strftime);

our ($p_job);
our $p_version;
our $p_path;

##
## Check parameters
##
my $catalogfile_dirs   = $::CATALOGPATH.$p_job."_".$::p_version.".dirs";
my $catalogfile_files  = $::CATALOGPATH.$p_job."_".$::p_version.".files";
my $catalogfile_owners = $::CATALOGPATH.$p_job."_".$::p_version.".owners";
my $catalogfile_groups = $::CATALOGPATH.$p_job."_".$::p_version.".groups";

my @cat_dirs = ();
@{$cat_dirs[0]} = ();

for my $line(read_log($catalogfile_dirs)){
	chomp($line);
	my @val = split(/\|/,$line);
	@{$cat_dirs[$val[0]]} = () if not defined $cat_dirs[$val[0]];
  my @tmp = ($val[1], $val[2], $val[3], $val[4], $val[5]);
  push @{$cat_dirs[$val[0]]},\@tmp;
}

my @cat_files = ();
for my $line(read_log($catalogfile_files)){
	chomp($line);
	my @val = split(/\|/,$line);
	@{$cat_files[$val[0]]} = () if not defined $cat_files[$val[0]];
  my @tmp = ($val[1], $val[2], $val[3], $val[4], $val[5], $val[6]);
  push @{$cat_files[$val[0]]},\@tmp;
}

my @os_ownerlist = ();
for my $line(read_log($catalogfile_owners)){
	chomp($line);
	my @val = split(/\|/,$line);
	$os_ownerlist[$val[0]] = $val[1];
}

my @os_grouplist = ();
for my $line(read_log($catalogfile_groups)){
	chomp($line);
	my @val = split(/\|/,$line);
	$os_grouplist[$val[0]] = $val[1];
}

my $out_perm  = "";
my $out_owner = "";
my $out_group = "";
my $out_size  = "";
my $out_time  = "";
my $out_path  = "";

my $catalog_found = 0;

sub traverse_cat {
	my ($cat_dirid, $append_path,$last_file) = @_;
  ## Get files in this directory
  my $i = -1;
  if(defined $cat_files[$cat_dirid]){
   	for(@{$cat_files[$cat_dirid]}){
    	$i++;
    	next if not defined $cat_files[$cat_dirid][$i];
    	next if $last_file ne "" && $last_file ne $cat_files[$cat_dirid][$i][0];

    	$out_time = strftime("%d/%m/%G %H:%M", localtime($cat_files[$cat_dirid][$i][2]));
      $out_perm = $cat_files[$cat_dirid][$i][3];
    	$out_owner = $cat_files[$cat_dirid][$i][4];
    	$out_group = $cat_files[$cat_dirid][$i][5];
    	$out_path = $append_path."/".$cat_files[$cat_dirid][$i][0];
    	
    	$out_size = size2human($cat_files[$cat_dirid][$i][1]);
    	
    	$out_perm = "-".oct2bit($out_perm);
    	    	
    	if($out_owner =~ /^(\d+)$/ && defined $os_ownerlist[$1]){
    		$out_owner = $os_ownerlist[$1];
    	}else{
    		$out_owner = "N/A";
    	}
    	
    	if($out_group =~ /^(\d+)$/ && defined $os_grouplist[$1]){
    		$out_group = $os_grouplist[$1];
    	}else{
    		$out_group = "N/A";
    	}
    	
    	$catalog_found = 1;
    	printf "%-10.10s  %-9.9s  %-9.9s  %10.10s  %16.16s  %s\n",
      	$out_perm, 
      	$out_owner,
      	$out_group,
      	$out_size,
      	$out_time,
     		$out_path;
  	}
	}
	
	$i = -1;
	if(defined $cat_dirs[$cat_dirid]){
  	for(@{$cat_dirs[$cat_dirid]}){
  		$i++;
  		
    	$out_perm = $cat_dirs[$cat_dirid][$i][2];
    	$out_owner = $cat_dirs[$cat_dirid][$i][3];
    	$out_group = $cat_dirs[$cat_dirid][$i][4];
    	$out_path = $append_path."/".$cat_dirs[$cat_dirid][$i][1]."/";
  		
  		$out_perm = "d".oct2bit($out_perm);
  		
  		if($out_owner =~ /^(\d+)$/ && defined $os_ownerlist[$1]){
    		$out_owner = $os_ownerlist[$1];
    	}else{
    		$out_owner = "N/A";
    	}
    	
    	if($out_group =~ /^(\d+)$/ && defined $os_grouplist[$1]){
    		$out_group = $os_grouplist[$1];
    	}else{
    		$out_group = "N/A";
    	}
  		
  		$catalog_found = 1;
    	printf "%-10.10s  %-9.9s  %-9.9s  %10.10s  %16.16s  %s\n",
      	$out_perm, 
      	$out_owner,
      	$out_group,
      	"-",
      	"-",
      	$out_path;
      	
      ## Go into a subdirectory
      traverse_cat($cat_dirs[$cat_dirid][$i][0],$append_path."/".$cat_dirs[$cat_dirid][$i][1],$last_file);
  	}
  }
	return;
}


my $cat_start_dirid = 0;
my $cat_start_dirpath = "";
my $tmp_name = "";
my $last_file = "";

if($p_path){
	$p_path =~ s/\/+/\//;
	$p_path =~ s/\/$//;
}

if($p_path){
	$cat_start_dirpath = "/";
	## Find parent dirid
	my @cat_split = split(/\//,$p_path);
	for my $cat_tmp(@cat_split){
		$last_file = $cat_tmp;
		if(defined $cat_dirs[$cat_start_dirid]){
			## Check if present under current dirid
			my $i = -1;
			for(@{$cat_dirs[$cat_start_dirid]}){
				$i++;
				next if ! defined $cat_dirs[$cat_start_dirid][$i];
				if($cat_dirs[$cat_start_dirid][$i][1] eq $cat_tmp){
					$cat_start_dirpath .= $cat_dirs[$cat_start_dirid][$i][1]."/";
					$cat_start_dirid = $cat_dirs[$cat_start_dirid][$i][0];
					last;
				}
			}
		}
	}
	$cat_start_dirpath =~ s/\/$//;
	
	my $found = 0;
	if($p_path ne $cat_start_dirpath && defined $cat_files[$cat_start_dirid]){
		for my $tmp(@{$cat_files[$cat_start_dirid]}){
			if($$tmp[0] eq $last_file){
				$found = 1;
				#$cat_start_dirpath .= "/".$$tmp[0];
				last;
			}
		}
  }else{
  	$last_file = "" if !$found;
  }
  
  if($p_path ne $cat_start_dirpath && !$found){
		f_output("ERROR","Catalog path \"$p_path\" does not exists.",1);
	}
}



printf "%-10.10s  %-9.9s  %-9.9s  %10.10s  %16.16s  %s\n",
	"Permission",
	"Owner",
	"Group",
	"Size",
	"Time",
	"Path";
print "====================================================================================================================\n";

traverse_cat($cat_start_dirid,$cat_start_dirpath,$last_file);
f_output("ERROR","No data.",1) if !$catalog_found;

return 1;