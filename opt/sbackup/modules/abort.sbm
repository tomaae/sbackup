###########################################################################################
#
#                                         sbackup
#                                      abort module
#
###########################################################################################
use strict;
use warnings;
our ($p_job);
our %job;

##
## Check parameters
##
my $param_ok = 0;
if($p_job){
	$param_ok = job_exists($p_job);
	if($param_ok == 1){
		if(!-f $RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'}){
			print STDERR "Error: Job \"$p_job\" is not running.\n\n";
			$param_ok = 0;
		}
	}else{
		print STDERR "Error: Job \"$p_job\" does not exists.\n\n";
	}
}

## List running jobs
if($param_ok == 0){
	my $runningno = 0;
	print STDERR "Running jobs:\n";
	for my $tmp(sort keys %job){
		if(-f $RUNFILEPATH."sbackup_".$job{$tmp}{'NAME'}){
			print STDERR $job{$tmp}{'NAME'}."\n";
			$runningno++;
		}
	}
	print STDERR "There are no running jobs\n" if !$runningno;
	print STDERR "\n";
	exit 1;
}

## Get job pidfile
my @pid_output = &get_runfile($p_job,'status,type,epoch,rpid');
if($pid_output[0] && $pid_output[2][0]{'rpid'} && $pid_output[2][0]{'rpid'}  =~ /^\d+$/){
	f_output("ERROR","Abort is available only for backup jobs.",1) if $pid_output[2][0]{'type'} ne 'backup';
	f_output("ERROR","Job is already aborting.",1) if $pid_output[2][0]{'status'} eq '6';
	f_output("ERROR","Unable to abort, job may still be starting or finishing.",1) if $pid_output[2][0]{'status'} ne '0';
	
	## Verify rpid, it must belong to rsync
	system("$cmd_ps $pid_output[2][0]{'rpid'}|grep rsync >/dev/null 2>&1");
	f_output("ERROR","Unable to abort, job may still be starting or finishing.",1) if $? != 0;
	
	## Append abort request message to version log
	our $versionlogfile = $VERSIONLOGPATH.$p_job."_".$pid_output[2][0]{'epoch'}.".log";
	version_log('warning','user',$backupserver_fqdn,"Abort request received from ".$ENV{USERNAME}."@".$backupserver_fqdn);
	
	## Send kill request
	print "Sending abort request to $p_job...\n";
	system("$cmd_pkill -P $pid_output[2][0]{'rpid'} >/dev/null 2>&1");
	if($? == 0){
		print "Abort request sent successfully.\n";
		update_runfile($p_job,"status=6");
		exit 0;
	}else{
		## Verify pkill binary
		system("$cmd_which $cmd_pkill >/dev/null 2>&1");
		f_output("ERROR","pkill binary is missing, install pkill.") if $? != 0;
		f_output("ERROR","Failed to send abort request.",1);
	}	
}else{
	f_output("ERROR","Unable to abort, job may still be starting or finishing.",1);
}

return 1;