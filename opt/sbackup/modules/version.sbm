###########################################################################################
#
#                                         sbackup
#                                      version module
#
###########################################################################################
use strict;
use warnings;
use POSIX qw(strftime mktime ceil);
our %job;
our $p_job;
our $p_type;
our $sv_log;
our $sv_all;
our $sv_path;
our $p_version;

##
## Check parameters
##
f_output("ERROR","Invalid version.",1) if $p_version !~ /^(\d{4})\/(\d{2})\/(\d{2})\-(\d{2})(\d{2})(\d{2})$/;
$p_version = mktime($6,$5,$4,$3,$2 - 1,$1 - 1900);
my @tmp = &get_history($p_job,'status,name,start,end,error,size,perf,type','start=='.$p_version);
f_output("ERROR","Invalid version.",1) if !$tmp[0];


##
## Get catalog
##
if($sv_path){
	require "modules/catalog.sbm";
	return 1;
}

##
## Get version log
##
if($sv_log){
	require Term::ANSIColor;
  import Term::ANSIColor;
	f_output("ERROR","Missing job version.",1) if !$p_version;
	f_output("ERROR","Job log is not available.",1) if !-f $::SESSIONLOGPATH.$p_job."_".$p_version.".log";
	my $highlight = "";
	my $severity = "";
	for my $tmp(&read_log($::SESSIONLOGPATH.$p_job."_".$p_version.".log")){
		## Severity colors
		if($tmp =~ /^\[(\w+)\] /){
			$severity = $1;
			$highlight = "green";
			$highlight = "yellow" if $severity eq "Warning";
			$highlight = "cyan" if $severity eq "Minor";
			$highlight = "bright_red" if $severity eq "Major";
			$highlight = "red" if $severity eq "Critical";
			$tmp =~ s/^\[$severity\]//;
			$tmp = color($highlight)."[$severity]".color("reset").$tmp;
		}
		print $tmp;
	}
	return 1;
}


## Format Size/Perf
my $out_size = "N/A";
my $out_perf = "N/A";
if($tmp[2][0]{'type'} eq "backup" || $tmp[2][0]{'type'} eq "copy"){
	if($tmp[2][0]{'size'} ne "" && $tmp[2][0]{'size'} >= 0){
		$out_size = $tmp[2][0]{'size'}." B";
		$out_size = ceil($tmp[2][0]{'size'} / 1024)." KiB" if $tmp[2][0]{'size'} > (100 * 1024);
		$out_size = ceil($tmp[2][0]{'size'} / 1024 / 1024)." MiB" if $tmp[2][0]{'size'} > (9 * 1024 * 1024);
		$out_size = ceil($tmp[2][0]{'size'} / 1024 / 1024 / 1024)." GiB" if $tmp[2][0]{'size'} > (9 * 1024 * 1024 * 1024);
	}
	
	if($tmp[2][0]{'perf'} ne "" && $tmp[2][0]{'perf'} !~ /%$/ && $tmp[2][0]{'perf'} >= 0){
		$out_perf = $tmp[2][0]{'perf'}." B";
		$out_perf = ceil($tmp[2][0]{'perf'} / 1024)." K/s" if $tmp[2][0]{'perf'} > (100 * 1024);
		$out_perf = ceil($tmp[2][0]{'perf'} / 1024 / 1024)." M/s" if $tmp[2][0]{'perf'} > (9 * 1024 * 1024);
		$out_perf = ceil($tmp[2][0]{'perf'} / 1024 / 1024 / 1024)." G/s" if $tmp[2][0]{'perf'} > (9 * 1024 * 1024 * 1024);
	}elsif($tmp[2][0]{'perf'} =~ /%$/){
		$out_perf = $tmp[2][0]{'perf'};
	}
}

## Log
my $out_log = "Not available";
$out_log = "Available" if -f $::SESSIONLOGPATH.$tmp[2][0]{'name'}."_".$tmp[2][0]{'start'}.".log";

## Version
my $out_version;
$out_version = strftime("%G/%m/%d-%H%M%S", localtime($tmp[2][0]{'start'})) if $tmp[2][0]{'start'} ne "";

## Start/end time
my $out_start = "N/A";
my $out_end = "N/A";
$out_start = strftime("%a, %d/%m/%G %H:%M:%S", localtime($tmp[2][0]{'start'})) if $tmp[2][0]{'start'} ne "";
$out_end = strftime("%a, %d/%m/%G %H:%M:%S", localtime($tmp[2][0]{'end'})) if $tmp[2][0]{'end'} ne "";

## Type
my $out_type = "N/A";
$out_type = "Backup" if $tmp[2][0]{'type'} eq "backup";
$out_type = "Copy" if $tmp[2][0]{'type'} eq "copy";
$out_type = "Restore" if $tmp[2][0]{'type'} eq "restore";
$out_type = "Purge" if $tmp[2][0]{'type'} eq "purge";
$out_type = "Migration" if $tmp[2][0]{'type'} eq "migration";
$out_type = "Verify" if $tmp[2][0]{'type'} eq "verify";

## Parse status
my $out_status = "N/A";
$out_status = "Running" if $tmp[2][0]{'status'} eq "0";
$out_status = "Completed" if $tmp[2][0]{'status'} eq "1";
$out_status = "Completed/Warnings" if $tmp[2][0]{'status'} eq "2";
$out_status = "Completed/Errors" if $tmp[2][0]{'status'} eq "3";
$out_status = "Completed/Failures" if $tmp[2][0]{'status'} eq "4";
$out_status = "Failed" if $tmp[2][0]{'status'} eq "5";
$out_status = "Aborted" if $tmp[2][0]{'status'} eq "6";

if($out_status eq "Running" && $out_perf =~ /%$/){
	$out_status .= " ".$out_perf;
	$out_perf = "N/A";
}

## Parse status
my $out_error = "";
$out_error = $tmp[2][0]{'error'} if $tmp[2][0]{'error'};


printf "%20.20s : %s\n", "Job name", $tmp[2][0]{'name'};
printf "%20.20s : %s\n", "Job type", $out_type;
printf "%20.20s : %s\n", "Status",  $out_status;
printf "%20.20s : %s\n", "Error",  $out_error if $out_error;
printf "%20.20s : %s\n", "Version",  $out_version;
printf "%20.20s : %s\n", "Start time",  $out_start;
printf "%20.20s : %s\n", "End time", $out_end;
printf "%20.20s : %s\n", "Size", $out_size;
printf "%20.20s : %s\n", "Performance", $out_perf;
printf "%20.20s : %s\n", "Version log", $out_log;

return 1;