###########################################################################################
#
#                                         sbackup
#                                      backup module
#
###########################################################################################
#use diagnostics;
use strict;
use warnings;
our ($p_job);
our %job;
our $sv_background;

##
## Check parameters
##
if($p_job){
	my $param_ok = 0;
	for my $tmp_job(sort keys %job){
		$param_ok = 1 if $job{$tmp_job}{'NAME'} eq $p_job;
	}

  if($param_ok == 0){
  	print STDERR "Error: Job \"$p_job\" does not exists.\n\n";
  	print STDERR "Available jobs:\n";
  	for my $tmp(sort keys %job){
  		print STDERR $job{$tmp}{'NAME'};
  		print STDERR "\n";
  	}
  	print STDERR "\n";
  	exit 1;
  }
}else{
	print STDERR "Error: Job \"$p_job\" does not exists.\n\n";
	print STDERR "Available jobs:\n";
	for my $tmp(sort keys %job){
		print STDERR $job{$tmp}{'NAME'};
		print STDERR "\n";
	}
	print STDERR "\n";
	exit 1;
}

if(!$sv_background && !$::DEBUGMODE){
	system('echo "'.$BINPATH.'/sbackup -backup '.$p_job.' -background >/dev/null"|at now >/dev/null 2>&1');
	if($? == 0){
		print "Backup started successfully.\n";
		exit 0;
	}else{
		print STDERR "Backup failed to start.\n";
		exit 1;
	}
}

##
## Set variables
##
my $SB_TIMESTART = time();
my $SB_TIMEEND;

my $runfile = $RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'};
my $sessionlogfile = $SESSIONLOGPATH.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".log";

##
## backup_fail
##
sub backup_fail {
	my $msg = shift;
	$SB_TIMEEND = time();
	print STDERR "Error: $msg\n";
	update_history($p_job,"status=".$msg.",end=".$SB_TIMEEND,"status==running,type==backup,start==".$SB_TIMESTART);
	append_log($sessionlogfile,"End time: ".$SB_TIMEEND." (".epoch2human($SB_TIMEEND).")\nStatus:Error: $msg\n");
	rm_runfile($p_job);
	exit 1;
}

##
## Pre-initialization
##
&f_output("DEBUG","Starting backup $job{$p_job}{'NAME'}");

if(-f $runfile){
	&f_output("DEBUG","Runfile found.");
	
	my @output = &get_runfile($p_job,'status,type,pid');
	if($output[0] && $output[2][0]{'pid'} =~ /^\d+$/){
		&f_output("DEBUG","Runfile pid ".$output[2][0]{'pid'});
		system('ps '.$output[2][0]{'pid'});
		if($? == 0){
			print "Job is already running.\n";
			exit 1;
		}else{
			&f_output("DEBUG","Job is no longer running, possible crash or kill.");
			update_history($p_job,"status=killed", "status==running");
			rm_runfile($p_job);
		}
	}else{
		&f_output("DEBUG","Runfile is faulty, removing.");
		update_history($p_job,"status=killed", "status==running");
		rm_runfile($p_job);
	}
}


set_runfile($p_job,"type=backup,status=running,pid=".$$);
insert_history($p_job,"type=backup,status=running,name=".$job{$p_job}{'NAME'}.",start=".$SB_TIMESTART);
append_log($sessionlogfile,"Backup name: ".$job{$p_job}{'NAME'});
append_log($sessionlogfile,"Start time: ".$SB_TIMESTART." (".epoch2human($SB_TIMESTART).")\n");

##
## Get source
##
my $source_integ = "";
my $source_path = "";
if($job{$p_job}{'SOURCE'}{'-type'} eq "omv4"){
	&f_output("DEBUG","Source integration: OMV4");
	require omv4;
	import omv4;
	$source_integ = "OMV ";
	$source_path = omv_prepare_sharedfolder($job{$p_job}{'SOURCE'}{'-path'});
	if($source_path =~ /^Error:(.*)$/){backup_fail("Source $1");}
}

if($job{$p_job}{'SOURCE'}{'-type'} eq "filesystem"){
	&f_output("DEBUG","Source integration: filesystem");
	$source_path = $job{$p_job}{'SOURCE'}{'-path'};
	if($source_path !~  /^\//){backup_fail("Source $1");}
	backup_fail("Backup source path not found.") if !-d $source_path;
}

&f_output("DEBUG","Source path: \"$source_path\"");

##
## Get target
##
my $target_integ = "";
my $target_path = "";
if($job{$p_job}{'TARGET'}{'-type'} eq "omv4"){
	&f_output("DEBUG","Target integration: OMV4");
	require omv4;
	import omv4;
	$target_integ = "OMV ";
	$target_path = omv_prepare_sharedfolder($job{$p_job}{'TARGET'}{'-path'});
	if($target_path =~ /^Error:(.*)$/){backup_fail("Target $1")}
}

if($job{$p_job}{'TARGET'}{'-type'} eq "filesystem"){
	&f_output("DEBUG","Target integration: filesystem");
	$target_path = $job{$p_job}{'TARGET'}{'-path'};
	if($target_path !~  /^\//){backup_fail("Target $1");}
	backup_fail("Backup target path not found.") if !-d $target_path;
}

backup_fail("Backup source and target are identical.") if $source_path eq $target_path;

## Create job repository on in target path
$target_path .= $slash."sbackup_".$p_job;
if(!-d $target_path){
	system($cmd_mkdir.' '.$target_path.' 2>&1');
	backup_fail("Backup target path creation failed.") if $? != 0;
}
&f_output("DEBUG","Target path: \"$target_path\"");

##
## Check backup history
##
my $INCR = "";
if(-f $VARPATH.'history_'.$p_job){
	##Get backup status from history
	&f_output("DEBUG","History log found, checking history.");
	my $LAST_FAILED_STAMP    = 0;
	my $LAST_COMPLETED_STAMP = 0;
  my @output = &get_history($p_job,'status,start','type==backup');
  for my $tmp(@{$output[2]}){
  	if($$tmp{'start'} eq $SB_TIMESTART){
  		&f_output("DEBUG","Skipping current backup in history file.");
  		next;
  	}
  	if($$tmp{'start'} ne "" && $$tmp{'start'} > 100 && -d $target_path.$slash."data_".$$tmp{'start'}){
  		if($$tmp{'status'} =~ /^\d+$/ && $$tmp{'status'} == "0"){
  			$LAST_COMPLETED_STAMP = $$tmp{'start'};
  		}else{
  			$LAST_FAILED_STAMP = $$tmp{'start'};
  		}
  	}else{
  		&f_output("DEBUG","Data not found for job $$tmp{'start'}");
  	}
  }
  &f_output("DEBUG","Last failed version: ".$LAST_FAILED_STAMP) if $LAST_FAILED_STAMP;
  &f_output("DEBUG","Last completed version: ".$LAST_COMPLETED_STAMP) if $LAST_COMPLETED_STAMP;
  
  if($LAST_COMPLETED_STAMP || $LAST_FAILED_STAMP){
  	##Check for backup to restart
  	if($LAST_FAILED_STAMP > $LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Last version is failed, cleaning up and restarting.");
			append_log($sessionlogfile,"Restarting backup from version ".$LAST_FAILED_STAMP." (".epoch2human($LAST_FAILED_STAMP).")\n");
			if(!$main::SIMULATEMODE){
  			system("$cmd_mv ".$target_path.$slash."data_".$LAST_FAILED_STAMP." ".$target_path.$slash."data_".$SB_TIMESTART);
  			backup_fail("Restart failed") if $? != 0;
			}
  	}
  	
  	##Check for last completed backup
  	if($LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Last completed backup found, incremental enabled.");
			$INCR=" --link-dest=\"".$target_path.$slash."data_".$LAST_COMPLETED_STAMP.$slash."\"";
  	}
	}
}else{
	&f_output("DEBUG","History log not found, initial backup.");
}

##
## Create version directories
##
if(!$main::SIMULATEMODE){
	&f_output("DEBUG","Creating data directory for $SB_TIMESTART");
  system("$cmd_mkdir     ".$target_path.$slash."data_".$SB_TIMESTART);
  system("$cmd_chmod 777 ".$target_path.$slash."data_".$SB_TIMESTART) if $? != 0;
  backup_fail("Vercreate failed") if !-d $target_path.$slash."data_".$SB_TIMESTART;
}

##
## Run backup
##
my $SB_ECODE = "";
system("$cmd_sleep 1") if !$main::SIMULATEMODE;
&f_output("DEBUG","Starting backup.");
my $cmd = " --verbose --stats -aEAX --delete ".$INCR." \"".$source_path.$slash."\" \"".$target_path.$slash."data_".$SB_TIMESTART.$slash."\"";
&f_output("DEBUG3","Execute: \"$cmd_rsync $cmd\"");
system("$cmd_rsync $cmd >> $sessionlogfile") if !$main::SIMULATEMODE;
$SB_ECODE=$? if !$main::SIMULATEMODE;

##Check backup status
my $RSSIZE = "";
my $RSPERF = "";
for(read_log($sessionlogfile)){
	chomp;
	if(/^Total file size: (\d+) bytes/){
		$RSSIZE = $1;
	}
	if(/ (\d+).00 bytes\/sec$/){
		$RSPERF = $1;
	}
}

$SB_TIMEEND = time();
$SB_ECODE = "-1" if $SB_ECODE eq "";
update_history($p_job,"status=".$SB_ECODE.",end=".$SB_TIMEEND.",size=".$RSSIZE.",perf=".$RSPERF,"status==running,type==backup,start==".$SB_TIMESTART);
append_log($sessionlogfile,"End time: ".$SB_TIMEEND." (".epoch2human($SB_TIMEEND).")\nStatus:".$SB_ECODE."\n");
append_log($sessionlogfile,"Backup completed successfully.") if $SB_ECODE eq "0";


if($SB_ECODE eq "0"){
	append_log($sessionlogfile,"Writing meta data");
	##Create meta directory
	system("$cmd_mkdir ".$target_path.$slash."meta_".$SB_TIMESTART.$slash);
  system("$cmd_chmod 777 ".$target_path.$slash."meta_".$SB_TIMESTART.$slash) if ($? != 0);

  ##Copy meta
  system("$cmd_cp \"".$VARPATH.'history_'.$p_job."\"   \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
  system("$cmd_cp \"".$sessionlogfile."\"              \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
  system("$cmd_cp \"".$JOBCONFIGPATH.$slash.$p_job."\" \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
  
	##Link latest backup
  system("$cmd_rm \"".$target_path.$slash."data_latest\"") if -l $target_path.$slash."data_latest" || -f $target_path.$slash."data_latest";
  system("cd \"$target_path\" && $cmd_ln \"data_".$SB_TIMESTART."\" \"data_latest\"");
  system("$cmd_rm \"".$target_path.$slash."meta_latest\"") if -l $target_path.$slash."meta_latest" || -f $target_path.$slash."meta_latest";
  system("cd \"$target_path\" && $cmd_ln \"meta_".$SB_TIMESTART."\" \"meta_latest\"");
}

rm_runfile($p_job);
if($SB_ECODE == "0"){
	append_log($sessionlogfile,"Starting post-purge");
	&f_output("DEBUG","Starting post-purge.");
	system("${BINPATH}/sbackup -purge ".$p_job." >/dev/null");
	if($? != 0){
		print STDERR "Post-purge failed to start.\n";
		append_log($sessionlogfile,"Post-purge failed to start.");
		&f_output("DEBUG","Post-purge failed to start.");
	}else{
		append_log($sessionlogfile,"Post-purge started successfully.");
		&f_output("DEBUG","Post-purge started successfully.");
	}
}

if($SB_ECODE == "0" && $job{$p_job}{'POST'}{'-job'}{'-name'} ne ""){
	append_log($sessionlogfile,"Starting post-job ".$job{$p_job}{'POST'}{'-job'}{'-name'});
	&f_output("DEBUG","Starting ".$job{$p_job}{'POST'}{'-job'}{'-type'}." post-job ".$job{$p_job}{'POST'}{'-job'}{'-name'});
	system("${BINPATH}/sbackup -".$job{$p_job}{'POST'}{'-job'}{'-type'}." ".$job{$p_job}{'POST'}{'-job'}{'-name'}." >/dev/null");
	if($? != 0){
		print STDERR "Post-job failed to start.\n";
		append_log($sessionlogfile,"Post-job failed to start.");
		&f_output("DEBUG","Post-job failed to start.");
	}else{
		append_log($sessionlogfile,"Post-job started successfully.");
		&f_output("DEBUG","Post-job started successfully.");
	}
}

&f_output("DEBUG","Backup part end.");

return 1;