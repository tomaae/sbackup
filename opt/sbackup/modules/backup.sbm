###########################################################################################
#
#                                         sbackup
#                                      backup module
#
###########################################################################################
#use diagnostics;
use strict;
use warnings;
use POSIX qw(strftime);

our ($p_job);
our %job;
our $sv_background;

##
## Check parameters
##
my $param_ok = 0;
$param_ok = job_exists($p_job) if $p_job;
if($param_ok == 0){
	print STDERR "Error: Job \"$p_job\" does not exists.\n\n" if $p_job;
	print STDERR "Error: Job not specified.\n\n" if !$p_job;
	print STDERR "Available jobs:\n";
	for my $tmp_job(list_jobs()){
		print STDERR "\t$tmp_job\n";
	}
	f_output("ERROR","",1);
}

if(!$sv_background && !$::DEBUGMODE){
	my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
	f_output("ERROR",$result,1) if $result;
	system('echo "'.$BINPATH.'/sbackup -backup '.$p_job.' -background >/dev/null"|at now >/dev/null 2>&1');
	f_output("ERROR","Backup failed to start.",1) if $? != 0;
	print "Backup started successfully.\n";
	exit 0;
}


##
## Set variables
##
my $SB_TIMESTART = time();
my $SB_TIMEEND;
our $SB_ERRORLEVEL = 1;
our $sessionlogfile = $SESSIONLOGPATH.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".log";

##
## job_failed
##
sub job_failed {
	my $msg = shift;
	$SB_TIMEEND = time();
	print STDERR "Error: $msg\n";
	update_history($p_job,"status=5,end=".$SB_TIMEEND.",error=".$msg.",perf=","status==0,type==backup,start==".$SB_TIMESTART);
	version_log('critical','backup',$backupserver_fqdn,"Backup job failed with error $msg\nEnd time: ".strftime("%d/%m/%G %H:%M:%S", localtime(time())));
	rm_runfile($p_job);
	exit 1;
}

##
## Pre-initialization
##
&f_output("DEBUG","Starting backup $job{$p_job}{'NAME'}");
my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
f_output("ERROR",$result,1) if $result;

set_runfile($p_job,"type=backup,status=0,epoch=".$SB_TIMESTART.",pid=".$$);
insert_history($p_job,"type=backup,status=0,name=".$job{$p_job}{'NAME'}.",start=".$SB_TIMESTART.",perf=(Starting) 0%");
version_log('normal','backup',$backupserver_fqdn,"Starting backup job \"$job{$p_job}{'NAME'}\"\nJob version: ".strftime("%G/%m/%d-%H%M%S", localtime($SB_TIMESTART)));

##
## Get integ target
##
sub get_integ_path{
	my ($type,$path)=@_;
	my @returncodes;
	$returncodes[0] = 0;
	
	## OMV4
  if($type eq "omv4"){
  	&f_output("DEBUG","Integration: OMV4");
  	require omv4;
  	import omv4;
  	$returncodes[2]{'integ'} = "OMV ";
  	$returncodes[2]{'path'} = omv_prepare_sharedfolder($path);
  	if($returncodes[2]{'path'} =~ /^Error:(.*)$/){
  		version_log('critical','omv4',$backupserver_fqdn,"OMV4 reported error:\n$1");
  		job_failed("$1");
  	}
  	$returncodes[0] = 1;
  	version_log('normal','omv4',$backupserver_fqdn,"OMV4 volume found.\nShared folder location: $returncodes[2]{'path'}");
  }
  
  ## Filesystem
  if($type eq "filesystem"){
  	&f_output("DEBUG","Integration: filesystem");
  	$returncodes[2]{'path'} = $path;
  	if($returncodes[2]{'path'} !~  /^\//){job_failed("$1");}
  	job_failed("Backup path not found.") if !-d $returncodes[2]{'path'};
  	$returncodes[0] = 1;
  }

	return @returncodes;
}

##
## Get source
##
my $source_integ = "";
my $source_path = "";
my @source_result = get_integ_path($job{$p_job}{'SOURCE'}{'-type'}, $job{$p_job}{'SOURCE'}{'-path'});
if($source_result[0]){
	$source_integ = $source_result[2]{'integ'};
	$source_path = $source_result[2]{'path'};
}

&f_output("DEBUG","Source path: \"$source_path\"");

##
## LVM snapshot
##
my $lvm_path = "";
if($job{$p_job}{'SOURCE'}{'-snapshot'}{'-enabled'} eq 1 && $job{$p_job}{'SOURCE'}{'-snapshot'}{'-type'} eq "lvm"){
  &f_output("DEBUG","Integration: LVM");
  require lvm;
  import lvm;
	$lvm_path = lvm_create_snapshot($p_job, $SB_TIMESTART, $source_path, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-size'}, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-fallback'});
	if($lvm_path ne "1"){
		&f_output("DEBUG","Snapshot path: \"$lvm_path\"");
	}else{
		$lvm_path = "" if $lvm_path eq "1";
	}
}

##
## Get target
##
my $target_integ = "";
my $target_path = "";

my @target_result = get_integ_path($job{$p_job}{'TARGET'}{'-type'}, $job{$p_job}{'TARGET'}{'-path'});
if($target_result[0]){
	$target_integ = $target_result[2]{'integ'};
	$target_path = $target_result[2]{'path'};
}

job_failed("Backup source and target are identical.") if $source_path eq $target_path;

## Create job repository on in target path
$target_path .= $slash."sbackup_".$p_job;
if(!-d $target_path){
	system($cmd_mkdir.' '.$target_path.' 2>&1');
	job_failed("Backup target path creation failed.") if $? != 0;
}
&f_output("DEBUG","Target path: \"$target_path\"");

##
## Check backup history
##
my $INCR = "";
if(-f $VARPATH.'history_'.$p_job){
	##Get backup status from history
	&f_output("DEBUG","History log found, checking history.");
	my $LAST_FAILED_STAMP    = 0;
	my $LAST_COMPLETED_STAMP = 0;
  my @output = &get_history($p_job,'status,start','type==backup');
  for my $tmp(@{$output[2]}){
  	if($$tmp{'start'} eq $SB_TIMESTART){
  		&f_output("DEBUG","Skipping current backup in history file.");
  		next;
  	}
  	if($$tmp{'start'} ne "" && $$tmp{'start'} > 100 && -d $target_path.$slash."data_".$$tmp{'start'}){
  		if($$tmp{'status'} =~ /^\d+$/ && ($$tmp{'status'} eq "1" || $$tmp{'status'} eq "2" || $$tmp{'status'} eq "3")){
  			$LAST_COMPLETED_STAMP = $$tmp{'start'};
  		}else{
  			$LAST_FAILED_STAMP = $$tmp{'start'};
  		}
  	}else{
  		&f_output("DEBUG","Data not found for job $$tmp{'start'}");
  	}
  }
  &f_output("DEBUG","Last failed version: ".$LAST_FAILED_STAMP) if $LAST_FAILED_STAMP;
  &f_output("DEBUG","Last completed version: ".$LAST_COMPLETED_STAMP) if $LAST_COMPLETED_STAMP;
  
  if($LAST_COMPLETED_STAMP || $LAST_FAILED_STAMP){
  	##Check for backup to restart
  	if($LAST_FAILED_STAMP > $LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Last version is failed, cleaning up and restarting.");
			version_log('normal','backup',$backupserver_fqdn,"Restarting backup job from version ".strftime("%G/%m/%d-%H%M%S", localtime($LAST_FAILED_STAMP)));
			if(!$main::SIMULATEMODE){
  			system("$cmd_mv ".$target_path.$slash."data_".$LAST_FAILED_STAMP." ".$target_path.$slash."data_".$SB_TIMESTART);
  			job_failed("Restart failed") if $? != 0;
			}
  	}
  	
  	##Check for last completed backup
  	if($LAST_COMPLETED_STAMP){
  		&f_output("DEBUG","Last completed backup found, incremental enabled.");
			$INCR=" --link-dest=\"".$target_path.$slash."data_".$LAST_COMPLETED_STAMP.$slash."\"";
  	}
	}
}else{
	&f_output("DEBUG","History log not found, initial backup.");
}

##
## Create version directories
##
if(!$main::SIMULATEMODE){
	&f_output("DEBUG","Creating data directory for $SB_TIMESTART");
  system("$cmd_mkdir     ".$target_path.$slash."data_".$SB_TIMESTART);
  system("$cmd_chmod 777 ".$target_path.$slash."data_".$SB_TIMESTART) if $? != 0;
  job_failed("Vercreate failed") if !-d $target_path.$slash."data_".$SB_TIMESTART;
}

##
## Run backup
##
system("$cmd_sleep 1") if !$main::SIMULATEMODE;
my $SB_ECODE = "";
my $RSSIZE = "";
my $RSPERF = "";
my $total_files      = 0;
my $copied_files     = 0;
my $progress_percent = 0;
my $progress_percent_old = 0;
&f_output("DEBUG","Getting change list for backup.");
version_log('normal','rsync',$backupserver_fqdn,"Traversing source filesystem...");
my $rsync_params = " --stats -aEAXvi --out-format='%i|%n' --delete ".$INCR." \"".$source_path.$slash."\" \"".$target_path.$slash."data_".$SB_TIMESTART.$slash."\"";
if($lvm_path ne ""){
	$rsync_params = " --stats -aEAXvi --out-format='%i|%n' --delete ".$INCR." \"".$lvm_path.$slash."\" \"".$target_path.$slash."data_".$SB_TIMESTART.$slash."\"";
}
open(my $cmd_out,"-|","$cmd_rsync --dry-run $rsync_params 2>&1") || die "Failed: $!\n";
while (my $line = <$cmd_out>){
	$total_files++ if $line =~ /^\>f/;
	if($line =~ /^Total file size: ([0-9,\.]+) bytes/){
		$RSSIZE = $1;
		$RSSIZE =~ s/,//g;
	}
}
close($cmd_out);
update_history($p_job,"size=".$RSSIZE.",perf=0%","status==0,type==backup,start==".$SB_TIMESTART);
$total_files = 1 if $total_files == 0; ## Never divide by 0;

&f_output("DEBUG","Starting backup.");
&f_output("DEBUG3","Execute: \"$cmd_rsync $rsync_params\"");
my $aborting = 0;
my $data_changed = 0;
my $rsync_summary = "";
my @pid_output = &get_runfile($p_job,'status,type,pid');
$aborting = 1 if $pid_output[0] && $pid_output[2][0]{'pid'}  =~ /^\d+$/ && $pid_output[2][0]{'status'} eq '6';
if(!$aborting){
  my @val;
  my $rsync_simulate = "";
  $rsync_simulate = ' --dry-run ' if $main::SIMULATEMODE;
  my $rpid = open(my $cmd_out,"-|","$cmd_rsync $rsync_simulate $rsync_params 2>&1") || die "Failed: $!\n";
  update_runfile($p_job,"rpid=".$rpid) if $rpid && $rpid > 0;
  while (my $line = <$cmd_out>){
  	chomp($line);
  	if($line =~ /\|/){
  		@val = split(/\|/,$line);
  		
  		if($line =~ /^\>f/){ ## New file
    		$copied_files++;
    		$copied_files = $total_files - 1 if $copied_files >= $total_files; ## Should not display 100%
    		$progress_percent = ($copied_files/$total_files)*100;
    		$progress_percent =~ /(\d+)\.?\d?\d?/;
    		$progress_percent = $1;
    		if($line =~ /^\>f\+/){
    			append_log($sessionlogfile,'+'.$val[1]);
    		}else{
    			append_log($sessionlogfile,'*'.$val[1]);
    		}
    		$data_changed = 1;
    		update_history($p_job,"perf=".$progress_percent."%","status==0,type==backup,start==".$SB_TIMESTART) if $progress_percent ne $progress_percent_old;
    		$progress_percent_old = $progress_percent;
    	}elsif($line =~ /^\*deleting/){ ## Deleted
    		append_log($sessionlogfile,'-'.$val[1]);
    		$data_changed = 1;
    	}elsif($line =~ /^cd/){ ## New directory
    		append_log($sessionlogfile,'+'.$val[1]);
    		$data_changed = 1;
    	}elsif($line =~ /^c/){ ## Change of symlink
    		append_log($sessionlogfile,'*'.$val[1]);
    		$data_changed = 1;
    	}elsif($line =~ /^\./){ ## Change of attributes
    		next if $val[1] =~ /^\.\/\s*$/;
    		append_log($sessionlogfile,'.'.$val[1]);
    		$data_changed = 1;
    	}else{
    		version_log('warning','rsync',$backupserver_fqdn,$line);
    	}
  	}else{
  		if($line =~ /sending incremental file list/){
  			version_log('normal','rsync',$backupserver_fqdn,"Starting data transfer...");
  		}elsif($line =~ /^Number of files: / || $rsync_summary ne ""){
  			$rsync_summary .= $line."\n";
  			if($line =~ /^total size is/){
  				append_log($sessionlogfile,"\n") if $data_changed;
  				version_log('normal','rsync',$backupserver_fqdn,"Backup job summary:\n\n$rsync_summary");
  				$rsync_summary = "";
  			}
  		}elsif($line =~ /^\s*$/){
  			next;
  		}else{
  			my $severity = "warning";
  			$severity = "major" if $line =~ /^rsync.*error/;
    		version_log($severity,'rsync',$backupserver_fqdn,$line);
    	}
  	}
  }
  close($cmd_out);

  if($rsync_summary ne ""){
  	append_log($sessionlogfile,"\n") if $data_changed;
  	version_log('normal','rsync',$backupserver_fqdn,"Backup job summary:\n\n$rsync_summary");
  	$rsync_summary = "";
  }

  $SB_ECODE=$?;
  version_log('normal','rsync',$backupserver_fqdn,"Nothing backed up, no changed data found.") if $SB_ECODE eq "0" && !$data_changed;
}

## Check abort status
if($SB_ECODE ne "" && $SB_ECODE != 0){
	if(!$aborting){
		my @pid_output = &get_runfile($p_job,'status,type,pid');
		$aborting = 1 if $pid_output[0] && $pid_output[2][0]{'pid'}  =~ /^\d+$/ && $pid_output[2][0]{'status'} eq '6';
	}
	if($aborting){
		$SB_ERRORLEVEL = "6";
		version_log('minor','rsync',$backupserver_fqdn,"Job aborted by user.");
	}
}

##
## LVM remove snapshot
##
if($job{$p_job}{'SOURCE'}{'-snapshot'}{'-enabled'} eq 1 && $job{$p_job}{'SOURCE'}{'-snapshot'}{'-type'} eq "lvm" && $lvm_path ne ""){
  &f_output("DEBUG","Integration: LVM");
  require lvm;
  import lvm;
	lvm_remove_snapshot($p_job, $SB_TIMESTART, $source_path, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-size'}, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-fallback'});
}

##Check backup status
if($SB_ECODE eq "0"){
  for(read_log($sessionlogfile)){
  	chomp;
  	if(/^Total file size: ([0-9,\.]+) bytes/){
  		$RSSIZE = $1;
  		$RSSIZE =~ s/,//g;
  	}
  	if(/ ([0-9,]+).\d\d bytes\/sec$/){
  		$RSPERF = $1;
  		$RSPERF =~ s/,//g;
  	}
  }
}

$SB_TIMEEND = time();
$SB_ECODE = "-1" if $SB_ECODE eq "";

if($SB_ECODE eq "0"){
	#version_log('normal','rsync',$backupserver_fqdn,"Writing meta data...");
	update_history($p_job,"perf=(Meta) 100%","status==0,type==backup,start==".$SB_TIMESTART);
	my $meta_ecode = 0;
	
	if(!$main::SIMULATEMODE){
  	##Create meta directory
  	system("$cmd_mkdir ".$target_path.$slash."meta_".$SB_TIMESTART.$slash);
  	$meta_ecode = $? if $? ne "0";
    system("$cmd_chmod 777 ".$target_path.$slash."meta_".$SB_TIMESTART.$slash) if ($? != 0);
    $meta_ecode = $? if $? ne "0";

    ##Copy meta
    system("$cmd_cp \"".$VARPATH.'history_'.$p_job."\"   \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    $meta_ecode = $? if $? ne "0";
    system("$cmd_cp \"".$sessionlogfile."\"              \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    $meta_ecode = $? if $? ne "0";
    system("$cmd_cp \"".$JOBCONFIGPATH.$slash.$p_job."\" \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    $meta_ecode = $? if $? ne "0";
    
  	##Link latest backup
    system("$cmd_rm \"".$target_path.$slash."data_latest\"") if -l $target_path.$slash."data_latest" || -f $target_path.$slash."data_latest";
    $meta_ecode = $? if $? ne "0";
    system("cd \"$target_path\" && $cmd_ln \"data_".$SB_TIMESTART."\" \"data_latest\"");
    $meta_ecode = $? if $? ne "0";
    system("$cmd_rm \"".$target_path.$slash."meta_latest\"") if -l $target_path.$slash."meta_latest" || -f $target_path.$slash."meta_latest";
    $meta_ecode = $? if $? ne "0";
    system("cd \"$target_path\" && $cmd_ln \"meta_".$SB_TIMESTART."\" \"meta_latest\"");
    $meta_ecode = $? if $? ne "0";
	}
  if($meta_ecode eq "0"){
  	version_log('normal','backup',$backupserver_fqdn,"Meta data saved successfully.");
  }else{
  	version_log('minor','backup',$backupserver_fqdn,"Failed to save meta data.");
  }
}

if($job{$p_job}{'TARGET'}{'-host'} eq "" && ($job{$p_job}{'TARGET'}{'-type'} eq "filesystem" || $job{$p_job}{'TARGET'}{'-type'} eq "omv4")){
	update_history($p_job,"perf=(Flushing) 100%","status==0,type==backup,start==".$SB_TIMESTART);
	version_log('normal','sync',$backupserver_fqdn,"Flushing write cache...");
  system("sync -f \"$target_path\"");
  if($? == 0){
  	version_log('normal','sync',$backupserver_fqdn,"Write cache successfully flushed.");
  }else{
  	version_log('minor','backup',$backupserver_fqdn,"Failed to flush write cache.");
  }
}

$SB_ERRORLEVEL = 5 if $SB_ECODE ne "0" && $SB_ERRORLEVEL < 5;

if($SB_ECODE eq "0"){
	version_log('normal','backup',$backupserver_fqdn,"Backup job completed successfully.\nEnd time: ".strftime("%d/%m/%G %H:%M:%S", localtime($SB_TIMEEND)));
}else{
	version_log('normal','backup',$backupserver_fqdn,"Backup job completed with error $SB_ECODE\nEnd time: ".strftime("%d/%m/%G %H:%M:%S", localtime($SB_TIMEEND)));
}
update_history($p_job,"status=".$SB_ERRORLEVEL.",end=".$SB_TIMEEND.",size=".$RSSIZE.",perf=".$RSPERF,"status==0,type==backup,start==".$SB_TIMESTART);
#update_history($p_job,"status=5,end=".$SB_TIMEEND.",error=".$SB_ECODE.",perf=","status==0,type==backup,start==".$SB_TIMESTART);
rm_runfile($p_job);

if($SB_ECODE eq "0"){
	&f_output("DEBUG","Starting post-purge.");
	system("${BINPATH}/sbackup -purge ".$p_job." >/dev/null");
	if($? != 0){
		print STDERR "Post-purge failed to start.\n";
		version_log('minor','backup',$backupserver_fqdn,"Post-purge failed to start.");
		&f_output("DEBUG","Post-purge failed to start.");
	}else{
		version_log('normal','backup',$backupserver_fqdn,"Post-purge started successfully.");
		&f_output("DEBUG","Post-purge started successfully.");
	}
}

if($SB_ECODE eq "0" && $job{$p_job}{'POST'}{'-job'}{'-name'} ne ""){
	&f_output("DEBUG","Starting ".$job{$p_job}{'POST'}{'-job'}{'-type'}." post-job ".$job{$p_job}{'POST'}{'-job'}{'-name'});
	system("${BINPATH}/sbackup -".$job{$p_job}{'POST'}{'-job'}{'-type'}." ".$job{$p_job}{'POST'}{'-job'}{'-name'}." >/dev/null");
	if($? != 0){
		print STDERR "Post-job failed to start.\n";
		version_log('minor','backup',$backupserver_fqdn,"Post-job failed to start.");
		&f_output("DEBUG","Post-job failed to start.");
	}else{
		version_log('normal','backup',$backupserver_fqdn,"Post-job started successfully.");
		&f_output("DEBUG","Post-job started successfully.");
	}
}

return 1;