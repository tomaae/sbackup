###########################################################################################
#
#                                         sbackup
#                                      backup module
#
###########################################################################################
#use diagnostics;
use strict;
use warnings;
use POSIX qw(strftime);

our ($p_job);
our %job;
our $sv_background;

##
## Check parameters
##
my $param_ok = 0;
$param_ok = job_exists($p_job) if $p_job;
if($param_ok == 0){
	print STDERR "Error: Job \"$p_job\" does not exists.\n\n" if $p_job;
	print STDERR "Error: Job not specified.\n\n" if !$p_job;
	print STDERR "Available jobs:\n";
	for my $tmp_job(list_jobs()){
		print STDERR "\t$tmp_job\n";
	}
	f_output("ERROR","",1);
}

if(!$sv_background && !$::DEBUGMODE){
	my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
	f_output("ERROR",$result,1) if $result;
	system('echo "'.$BINPATH.'/sbackup -backup '.$p_job.' -background >/dev/null"|at now >/dev/null 2>&1');
	f_output("ERROR","Backup failed to start.",1) if $? != 0;
	print "Backup started successfully.\n";
	exit 0;
}


##
## Set variables
##
our $SB_TIMESTART = time();
my $SB_TIMEEND;
our $SB_ERRORLEVEL = 1;
our $sessionlogfile = $SESSIONLOGPATH.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".log";

##
## job_failed
##
sub job_failed {
	my $msg = shift;
	$SB_TIMEEND = time();
	print STDERR "Error: $msg\n";
	
  ## LVM remove snapshot if present
  if($::job{$p_job}{'SOURCE'}{'-snapshot'}{'-enabled'} eq 1 && $::job{$p_job}{'SOURCE'}{'-snapshot'}{'-type'} eq "lvm" && $::lvm_path ne "" && $msg !~ /Snapshot/i){
    &f_output("DEBUG","Integration: LVM");
    require lvm;
    import lvm;
  	lvm_remove_snapshot($p_job, $SB_TIMESTART, $::source_path, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-size'}, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-fallback'});
  }
	
	update_history($p_job,"status=5,end=".$SB_TIMEEND.",error=".$msg.",perf=","status==0,type==backup,start==".$SB_TIMESTART);
	version_log('critical','backup',$backupserver_fqdn,"Backup job failed with error:\n$msg");
	rm_runfile($p_job);
	exit 1;
}

##
## Pre-initialization
##
&f_output("DEBUG","Starting backup $job{$p_job}{'NAME'}");
my $result = check_runfile($p_job,$RUNFILEPATH."sbackup_".$job{$p_job}{'NAME'});
f_output("ERROR",$result,1) if $result;

set_runfile($p_job,"type=backup,status=0,epoch=".$SB_TIMESTART.",pid=".$$);
insert_history($p_job,"type=backup,status=0,name=".$job{$p_job}{'NAME'}.",start=".$SB_TIMESTART.",perf=(Starting) 0%");
version_log('normal','backup',$backupserver_fqdn,"Starting backup job \"$job{$p_job}{'NAME'}\"\nJob version: ".strftime("%G/%m/%d-%H%M%S", localtime($SB_TIMESTART)));

##
## Get integ target
##
sub get_integ_path{
	my ($type,$path)=@_;
	my @returncodes;
	$returncodes[0] = 0;
	
	## OMV4
  if($type eq "omv4"){
  	&f_output("DEBUG","Integration: OMV4");
  	require omv4;
  	import omv4;
  	$returncodes[2]{'integ'} = "OMV ";
  	$returncodes[2]{'path'} = omv_prepare_sharedfolder($path);
  	if($returncodes[2]{'path'} =~ /^Error:(.*)$/){
  		version_log('critical','omv4',$backupserver_fqdn,"OMV4 reported error:\n$1");
  		job_failed("$1");
  	}
  	$returncodes[0] = 1;
  	version_log('normal','omv4',$backupserver_fqdn,"OMV4 volume found.\nShared folder location: $returncodes[2]{'path'}");
  }
  
  ## Filesystem
  if($type eq "filesystem"){
  	&f_output("DEBUG","Integration: filesystem");
  	$returncodes[2]{'integ'} = "";
  	$returncodes[2]{'path'} = $path;
  	if($returncodes[2]{'path'} !~  /^\//){job_failed("$1");}
  	job_failed("Backup path not found.") if !-d $returncodes[2]{'path'};
  	$returncodes[0] = 1;
  }

	return @returncodes;
}

##
## Get source
##
my $source_integ = "";
my $source_path = "";
my @source_result = get_integ_path($job{$p_job}{'SOURCE'}{'-type'}, $job{$p_job}{'SOURCE'}{'-path'});
if($source_result[0]){
	$source_integ = $source_result[2]{'integ'};
	$source_path = $source_result[2]{'path'};
}

&f_output("DEBUG","Source path: \"$source_path\"");

##
## LVM snapshot
##
my $lvm_path = "";
if($job{$p_job}{'SOURCE'}{'-snapshot'}{'-enabled'} eq 1 && $job{$p_job}{'SOURCE'}{'-snapshot'}{'-type'} eq "lvm"){
  &f_output("DEBUG","Integration: LVM");
  require lvm;
  import lvm;
	$lvm_path = lvm_create_snapshot($p_job, $SB_TIMESTART, $source_path, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-size'}, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-fallback'});
	if($lvm_path ne "1"){
		&f_output("DEBUG","Snapshot path: \"$lvm_path\"");
	}else{
		$lvm_path = "" if $lvm_path eq "1";
	}
}

##
## Get target
##
my $target_integ = "";
my $target_path = "";

my @target_result = get_integ_path($job{$p_job}{'TARGET'}{'-type'}, $job{$p_job}{'TARGET'}{'-path'});
if($target_result[0]){
	$target_integ = $target_result[2]{'integ'};
	$target_path = $target_result[2]{'path'};
}

job_failed("Backup source and target locations are identical.") if $source_path eq $target_path;

## Create job repository on in target path
$target_path .= $slash."sbackup_".$p_job;
if(!-d $target_path){
	system($cmd_mkdir.' '.$target_path.' 2>&1');
	job_failed("Failed to create a backup target directory.") if $? != 0;
}
&f_output("DEBUG","Target path: \"$target_path\"");

##
## Create version directories
##
if(!$main::SIMULATEMODE){
	&f_output("DEBUG","Creating data directory for $SB_TIMESTART");
  system("$cmd_mkdir     ".$target_path.$slash."data_".$SB_TIMESTART);
  system("$cmd_chmod 777 ".$target_path.$slash."data_".$SB_TIMESTART) if $? != 0;
  job_failed("Failed to create a version directory.") if !-d $target_path.$slash."data_".$SB_TIMESTART;
}

##
## Run backup
##
system("$cmd_sleep 1") if !$main::SIMULATEMODE;
my $JOB_SIZE = "";
my $JOB_PERF = "";
if($source_integ eq "" || $source_integ eq "OMV "){
	my @result = ();
	require rsync;
  import rsync;
  if($lvm_path eq ""){
  	@result = rsync_backup($p_job, $SB_TIMESTART, $source_path, $target_path);
  }else{
  	@result = rsync_backup($p_job, $SB_TIMESTART, $lvm_path, $target_path);
  }
  $JOB_SIZE = $result[1]{'JOB_SIZE'};
  $JOB_PERF = $result[1]{'JOB_PERF'};
}

##
## LVM remove snapshot
##
if($job{$p_job}{'SOURCE'}{'-snapshot'}{'-enabled'} eq 1 && $job{$p_job}{'SOURCE'}{'-snapshot'}{'-type'} eq "lvm" && $lvm_path ne ""){
  &f_output("DEBUG","Integration: LVM");
  require lvm;
  import lvm;
	lvm_remove_snapshot($p_job, $SB_TIMESTART, $source_path, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-size'}, $job{$p_job}{'SOURCE'}{'-snapshot'}{'-fallback'});
}

$SB_TIMEEND = time();

if($SB_ERRORLEVEL <= 3){
	#version_log('normal','rsync',$backupserver_fqdn,"Writing meta data...");
	update_history($p_job,"perf=(Meta) 100%","status==0,type==backup,start==".$SB_TIMESTART);
	my $meta_ecode = 0;
	
	if(!$main::SIMULATEMODE){
  	##Create meta directory
  	system("$cmd_mkdir ".$target_path.$slash."meta_".$SB_TIMESTART.$slash);
  	$meta_ecode = $? if $? ne "0";
    system("$cmd_chmod 777 ".$target_path.$slash."meta_".$SB_TIMESTART.$slash) if ($? != 0);
    $meta_ecode = $? if $? ne "0";

    ##Copy meta
    system("$cmd_cp \"".$VARPATH.'history_'.$p_job."\"   \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    $meta_ecode = $? if $? ne "0";
    system("$cmd_cp \"".$sessionlogfile."\"              \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    $meta_ecode = $? if $? ne "0";
    system("$cmd_cp \"".$JOBCONFIGPATH.$slash.$p_job."\" \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    $meta_ecode = $? if $? ne "0";
    
    if($source_integ eq "" || $source_integ eq "OMV "){
    	if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".files"){
    		system("$cmd_cp \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".files\" \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    		$meta_ecode = $? if $? ne "0";
    	}
    	if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".dirs"){
    		system("$cmd_cp \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".dirs\"  \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    		$meta_ecode = $? if $? ne "0";
    	}
    	
    	if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".owners"){
    		system("$cmd_cp \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".owners\"  \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    		$meta_ecode = $? if $? ne "0";
    	}
    	if(-f $CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".groups"){
    		system("$cmd_cp \"".$CATALOGPATH.$slash.$job{$p_job}{'NAME'}."_".$SB_TIMESTART.".groups\"  \"".$target_path.$slash."meta_".$SB_TIMESTART.$slash."\"");
    		$meta_ecode = $? if $? ne "0";
    	}    	
  	}
    
  	##Link latest backup
    system("$cmd_rm \"".$target_path.$slash."data_latest\"") if -l $target_path.$slash."data_latest" || -f $target_path.$slash."data_latest";
    $meta_ecode = $? if $? ne "0";
    system("cd \"$target_path\" && $cmd_ln \"data_".$SB_TIMESTART."\" \"data_latest\"");
    $meta_ecode = $? if $? ne "0";
    system("$cmd_rm \"".$target_path.$slash."meta_latest\"") if -l $target_path.$slash."meta_latest" || -f $target_path.$slash."meta_latest";
    $meta_ecode = $? if $? ne "0";
    system("cd \"$target_path\" && $cmd_ln \"meta_".$SB_TIMESTART."\" \"meta_latest\"");
    $meta_ecode = $? if $? ne "0";
	}
  if($meta_ecode eq "0"){
  	version_log('normal','backup',$backupserver_fqdn,"Meta data saved successfully.");
  }else{
  	version_log('minor','backup',$backupserver_fqdn,"Failed to save meta data.");
  }
}

if($job{$p_job}{'TARGET'}{'-host'} eq "" && ($job{$p_job}{'TARGET'}{'-type'} eq "filesystem" || $job{$p_job}{'TARGET'}{'-type'} eq "omv4")){
	update_history($p_job,"perf=(Flushing) 100%","status==0,type==backup,start==".$SB_TIMESTART);
	version_log('normal','sync',$backupserver_fqdn,"Flushing write cache...");
  system("$cmd_sync -f \"$target_path\"") if !$main::SIMULATEMODE;
  if($? == 0 || $main::SIMULATEMODE){
  	version_log('normal','sync',$backupserver_fqdn,"Write cache successfully flushed.");
  }else{
  	version_log('minor','backup',$backupserver_fqdn,"Failed to flush write cache.");
  }
}

version_log('normal','backup',$backupserver_fqdn,"Backup job completed successfully.") if $SB_ERRORLEVEL eq "1";
version_log('normal','backup',$backupserver_fqdn,"Backup job completed with warnings.") if $SB_ERRORLEVEL eq "2";
version_log('normal','backup',$backupserver_fqdn,"Backup job completed with errors.") if $SB_ERRORLEVEL eq "3";
version_log('normal','backup',$backupserver_fqdn,"Backup job completed with failures.") if $SB_ERRORLEVEL eq "4";
version_log('normal','backup',$backupserver_fqdn,"Backup job failed.") if $SB_ERRORLEVEL eq "5";
version_log('normal','backup',$backupserver_fqdn,"Backup job was aborted.") if $SB_ERRORLEVEL eq "6";
update_history($p_job,"status=".$SB_ERRORLEVEL.",end=".$SB_TIMEEND.",size=".$JOB_SIZE.",perf=".$JOB_PERF,"status==0,type==backup,start==".$SB_TIMESTART);
rm_runfile($p_job);

if($SB_ERRORLEVEL <= 3){
	&f_output("DEBUG","Starting post-purge.");
	system("${BINPATH}/sbackup -purge ".$p_job." >/dev/null") if !$main::SIMULATEMODE;
	if($? != 0){
		print STDERR "Post-purge failed to start.\n";
		version_log('minor','backup',$backupserver_fqdn,"Post-purge failed to start.");
		&f_output("DEBUG","Post-purge failed to start.");
	}else{
		version_log('normal','backup',$backupserver_fqdn,"Post-purge started successfully.");
		&f_output("DEBUG","Post-purge started successfully.");
	}
}

if($SB_ERRORLEVEL <= 3 && $job{$p_job}{'POST'}{'-job'}{'-name'} ne ""){
	&f_output("DEBUG","Starting ".$job{$p_job}{'POST'}{'-job'}{'-type'}." post-job ".$job{$p_job}{'POST'}{'-job'}{'-name'});
	system("${BINPATH}/sbackup -".$job{$p_job}{'POST'}{'-job'}{'-type'}." ".$job{$p_job}{'POST'}{'-job'}{'-name'}." >/dev/null") if !$main::SIMULATEMODE;
	if($? != 0){
		print STDERR "Post-job failed to start.\n";
		version_log('minor','backup',$backupserver_fqdn,"Post-job failed to start.");
		&f_output("DEBUG","Post-job failed to start.");
	}else{
		version_log('normal','backup',$backupserver_fqdn,"Post-job started successfully.");
		&f_output("DEBUG","Post-job started successfully.");
	}
}

return 1;