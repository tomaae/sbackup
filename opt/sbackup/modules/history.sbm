###########################################################################################
#
#                                         sbackup
#                                     job history module
#
###########################################################################################

use strict;
use warnings;
use POSIX qw(strftime mktime ceil);
our %job;

my %history;
our $p_job;
our $p_type;
our $sv_all;
our $p_version;

##
## Check parameters
##
my $param_ok = 0;
$param_ok = job_exists($p_job) if $p_job;
if($p_job && $param_ok == 0){
	print STDERR "Error: Job \"$p_job\" does not exists.\n\nAvailable jobs:\n";
	for my $tmp_job(list_jobs()){
		print STDERR "\t$tmp_job\n";
	}
	f_output("ERROR","",1);
}

f_output("ERROR","Error: Job type \"$p_type\" is not valid.\n\nValid job types: backup, purge, verify.",1) if $p_type && $p_type !~ /^(backup|purge|verify)$/;

if($p_version){
	require "modules/version.sbm";
	return 1;
}

##
## Get job history and apply filters
##
for my $tmp_job(sort keys %job){
	next if $p_job && $job{$tmp_job}{'NAME'} ne $p_job;
	my @tmp_history = &get_history($tmp_job,'status,name,start,end,size,perf,type');
	for my $tmp(@{$tmp_history[2]}){
		next if $p_type && $$tmp{'type'} ne $p_type;
		$history{$$tmp{'start'}.'_'.$tmp_job} = $tmp;
	}
}

printf "%-17.17s %-9.9s %-20.20s %-14.14s %-22.22s %-6.6s %-9.9s %-8.8s %-3.3s\n",
	"Version",
	"Type",
	"Name",
	"Status",
	"Start time",
	"Time",
	"Size",
	"Perf",
	"Log";
print "====================================================================================================================\n";
##
## Display history
##
for my $key(sort keys %history){
	my %tmp = %{$history{$key}};
	##Status
	my $out_status = "";
	#$out_status = "Err:".$tmp{'status'} if $tmp{'status'} ne "1" && $tmp{'status'} ne "0";
	$out_status = "Running" if $tmp{'status'} eq "0";
  $out_status = "Completed" if $tmp{'status'} eq "1";
  $out_status = "Completed/Warnings" if $tmp{'status'} eq "2";
  $out_status = "Completed/Errors" if $tmp{'status'} eq "3";
  $out_status = "Completed/Failures" if $tmp{'status'} eq "4";
  $out_status = "Failed" if $tmp{'status'} eq "5";
  $out_status = "Aborted" if $tmp{'status'} eq "6";
	
	##Format job type
	my $out_type = "N/A";
	$out_type = "Backup" if $tmp{'type'} eq "backup";
	$out_type = "Copy" if $tmp{'type'} eq "copy";
	$out_type = "Restore" if $tmp{'type'} eq "restore";
	$out_type = "Purge" if $tmp{'type'} eq "purge";
	$out_type = "Migration" if $tmp{'type'} eq "migration";
	$out_type = "Verify" if $tmp{'type'} eq "verify";
	
	##Format start/end datetime
	my $out_start = "N/A";
	my $out_time = "N/A";
	$out_start = strftime("%a, %d/%m/%G %H:%M", localtime($tmp{'start'})) if $tmp{'start'} ne "";
	$out_time = min2time(ceil(($tmp{'end'} - $tmp{'start'})/60)) if $tmp{'end'} ne "";
	
	##Format version
	my $out_version = "N/A";
	$out_version = strftime("%G/%m/%d-%H%M%S", localtime($tmp{'start'})) if $tmp{'start'} ne "";
	
	##Format Size/Perf
	my $out_size = "N/A";
	my $out_perf = "N/A";
	if($tmp{'type'} eq "backup" || $tmp{'type'} eq "copy"){
		if($tmp{'size'} ne "" && $tmp{'size'} >= 0){
			$out_size = $tmp{'size'}." B";
			$out_size = ceil($tmp{'size'} / 1024)." KiB" if $tmp{'size'} > (100 * 1024);
			$out_size = ceil($tmp{'size'} / 1024 / 1024)." MiB" if $tmp{'size'} > (9 * 1024 * 1024);
			$out_size = ceil($tmp{'size'} / 1024 / 1024 / 1024)." GiB" if $tmp{'size'} > (9 * 1024 * 1024 * 1024);
		}
		
		if($tmp{'perf'} ne "" && $tmp{'perf'} !~ /%$/ && $tmp{'perf'} >= 0){
			$out_perf = $tmp{'perf'}." B";
			$out_perf = ceil($tmp{'perf'} / 1024)." K/s" if $tmp{'perf'} > (100 * 1024);
			$out_perf = ceil($tmp{'perf'} / 1024 / 1024)." M/s" if $tmp{'perf'} > (9 * 1024 * 1024);
			$out_perf = ceil($tmp{'perf'} / 1024 / 1024 / 1024)." G/s" if $tmp{'perf'} > (9 * 1024 * 1024 * 1024);
		}elsif($tmp{'perf'} =~ /%$/){
			$out_perf = $tmp{'perf'};
		}
	}
	
	##Log
	my $out_log = "N";
	$out_log = "Y" if -f $main::SESSIONLOGPATH.$tmp{'name'}."_".$tmp{'start'}.".log";

	printf "%-17.17s %-9.9s %-20.20s %-14.14s %-22.22s %-6.6s %-9.9s %-8.8s %-3.3s\n",
  	$out_version,
  	$out_type,
  	$tmp{'name'},
  	$out_status,
  	$out_start,
  	$out_time,
  	$out_size,
  	$out_perf,
  	$out_log;
}

if(keys %history == 0){
	print "No jobs found.\n";
}

return 1;