###########################################################################################
#
#                                         sbackup
#                                     scheduler module
#
###########################################################################################
use strict;
use warnings;
our %job;
use POSIX qw(strftime ceil mktime);

&f_output("DEBUG","Scheduler part start.");
##
## Set variables
##
my $SB_TIMESTART = time();
my $curr_wday = strftime("%a", localtime($SB_TIMESTART));
my $curr_time = strftime("%H:%M", localtime($SB_TIMESTART));
my ($sec, $min, $hour, $day,$month,$year) = localtime($SB_TIMESTART);
my $midnight_daily_epoch = mktime(0,0,0,$day,$month,$year);
my $midnight_weekly_epoch = $midnight_daily_epoch - 604800;

&f_output("DEBUG","Scheduler wday $curr_wday, time $curr_time.");

##
## Classic scheduler
##
for my $tmp_job(sort keys %job){
	&f_output("DEBUG","Checking schedule for $tmp_job.");
	next if $job{$tmp_job}{'ENABLED'} == 0;
	next if $job{$tmp_job}{'SCHEDULE'}{'-enabled'} ne "1";

	## Check scheduled day
	if($job{$tmp_job}{'SCHEDULE'}{'-day'} ne ""){
		my @tmp_schedules = split /,| /, $job{$tmp_job}{'SCHEDULE'}{'-day'};
		my $scheduled = 0;
		for my $tmp(@tmp_schedules){
			$scheduled = 1 if $tmp eq $curr_wday;
		}
		if($scheduled == 0){
			&f_output("DEBUG","Job is not scheduled for today, skipping.");
			next;
		}
	}
	
	## Check scheduled time
	if($job{$tmp_job}{'SCHEDULE'}{'-time'} eq $curr_time){
		## Check runfile
  	my $result = check_runfile($tmp_job,$RUNFILEPATH."sbackup_".$job{$tmp_job}{'NAME'});
  	if($result){
  		print STDERR "$result\n\n";
  		next;
  	}
		
		## Run backup
		&f_output("DEBUG","Starting job.");
		system('echo "'.$BINPATH.'/sbackup -backup '.$tmp_job.' -background >/dev/null"|at now >/dev/null 2>&1') if !$main::SIMULATEMODE;
  	if($? == 0){
  		print "Backup started successfully.\n";
  	}else{
  		print STDERR "Backup failed to start.\n";
  	}
  	system("$cmd_sleep 1") if !$main::SIMULATEMODE;
	}
}

##
## Automatic scheduler
##
&f_output("DEBUG","Starting autocheduler.");
for my $tmp_job(sort keys %job){
	my $start_backup = 0;
  my $LAST_FAILED_STAMP    = 0;
  my $LAST_COMPLETED_STAMP = 0;
  my $LAST_FAILURES_NO = 0;
	&f_output("DEBUG","Checking automatic schedule for >>>>> $tmp_job <<<<<.");
	next if $job{$tmp_job}{'ENABLED'} == 0;
	next if $job{$tmp_job}{'SCHEDULE'}{'-enabled'} ne "1";
	next if !$job{$tmp_job}{'SCHEDULE'}{'-automatic'};
	&f_output("DEBUG","Job automatic schedule is enabled.");
	
	## Check runfile
	next if check_runfile($tmp_job,$RUNFILEPATH."sbackup_".$job{$tmp_job}{'NAME'});
	
	## Check history file
  if(-f $VARPATH.'history_'.$tmp_job){
  	##Get backup status from history
  	&f_output("DEBUG","History log found, checking history.");
    my @output = &get_history($tmp_job,'status,start','type==backup');
    for my $tmp(@{$output[2]}){
  		if($$tmp{'status'} =~ /^\d+$/ && $$tmp{'status'} == "0"){
  			## Successful backup
  			$LAST_COMPLETED_STAMP = $$tmp{'start'};
  			$LAST_FAILURES_NO = 0;
  		}else{
  			## Failed backup
  			$LAST_FAILED_STAMP = $$tmp{'start'};
  			$LAST_FAILURES_NO++ if $$tmp{'status'} ne "running";
  		}
    }
  }else{
  	## No backup found in job history
  	&f_output("DEBUG","Job did not run yet.");
  	$start_backup = 1;
  }
  
  ## Last backup is failed
  if($LAST_FAILED_STAMP > $LAST_COMPLETED_STAMP){
  	if($LAST_FAILURES_NO == 1){
  		## Only one failure, restart
  		&f_output("DEBUG","Last job is failed, restarting.");
  		$start_backup = 1;
  	}else{
  		## More then one failure/failed restart, do nothing
  		&f_output("DEBUG","Last job is failed twice already, not restarting.");
  		next;
  	}
  }
  
  ## Daily schedule
  &f_output("DEBUG","Checking for daily $midnight_daily_epoch ".localtime($midnight_daily_epoch).", last:$LAST_COMPLETED_STAMP ".localtime($LAST_COMPLETED_STAMP));
  if($job{$tmp_job}{'SCHEDULE'}{'-automatic'} eq "daily" && $midnight_daily_epoch >= $LAST_COMPLETED_STAMP){
  	&f_output("DEBUG","Backup did not run today.");
  	$start_backup = 1;
  }
  
  ## Weekly schedule
  if($job{$tmp_job}{'SCHEDULE'}{'-automatic'} eq "weekly" && $midnight_weekly_epoch >= $LAST_COMPLETED_STAMP){
  	&f_output("DEBUG","Backup did not run in last 7 days.");
  	$start_backup = 1;
  }
  
  ## Check other running jobs
  if($start_backup == 1){
		for my $ps_line(`ps -ef|grep sbackup|grep background`){
			chomp($ps_line);
			next if $ps_line !~ /sbackup -(\w+) (.+) -background/i;
			
			## Compare target device for backup jobs
			if(defined($job{$2}) && $1 eq "backup" && $job{$2}{'TARGET'}{'-path'} ne "" && $job{$tmp_job}{'TARGET'}{'-path'} eq $job{$2}{'TARGET'}{'-path'}){
				&f_output("DEBUG","Target device is already in use by another backup.");
				$start_backup = 0;
			}
			
			## Compare target device for copy jobs
			if(defined($job{$2}) && $1 eq "copy" && $job{$2}{'COPY'}{'-path'} ne "" && $job{$tmp_job}{'TARGET'}{'-path'} eq $job{$2}{'COPY'}{'-path'}){
				&f_output("DEBUG","Target device is already in use by another backup.");
				$start_backup = 0;
			}
		}
	}
	
	## Start backup job
	if($start_backup == 1){
		&f_output("DEBUG","Starting job.");
		system('echo "'.$BINPATH.'/sbackup -backup '.$tmp_job.' -background >/dev/null"|at now >/dev/null 2>&1') if !$main::SIMULATEMODE;
  	if($? == 0){
  		print "Backup started successfully.\n";
  	}else{
  		print STDERR "Backup failed to start.\n";
  	}
  	system("$cmd_sleep 1") if !$main::SIMULATEMODE;
	}	
}

&f_output("DEBUG","Scheduler part end.");

return 1;