###########################################################################################
#
#                                         sbackup
#                                      report module
#
###########################################################################################

use strict;
use warnings;
use POSIX qw(strftime ceil);
our %job;

printf "%-1.1s %-18.18s %-18.18s %-10.10s %-16.16s %-20.20s %-20.20s %-14.14s %-3.3s\n",
	"Enabled",
	"Name",
	"Schedule",
	"Status",
	"Last completed",
	"Source",
	"Target",
	"Retention",
	"Versions";
print "================================================================================================================================\n";

for my $tmp_job(sort keys %job){
	my $out_enabled;
	if($job{$tmp_job}{'ENABLED'} == 1){$out_enabled = 'E';}else{$out_enabled = 'D';}
	
	##
	## Parse schedule
	##
	my $out_schedule;
	if($job{$tmp_job}{'SCHEDULE'}{'-enabled'} ne "1"){
		##Schedule disabled
		$out_schedule = "Disabled";
		for my $tmp_job2(keys %job){
			##Check for post job
			if($job{$tmp_job}{'NAME'} eq $job{$tmp_job2}{'POST'}{'-job'}{'-name'}){
				$out_schedule .= ", Post Job";
			}
		}
	}else{
		##Schedule Enabled
		$out_schedule .= $job{$tmp_job}{'SCHEDULE'}{'-time'}." ";
		my $tmp_noofschedules = 0;
		##Format schedule days
		if($job{$tmp_job}{'SCHEDULE'}{'-day'} ne ""){
  		my @tmp_schedules = split /,/, $job{$tmp_job}{'SCHEDULE'}{'-day'};
  		$tmp_noofschedules = scalar(@tmp_schedules);
  		$out_schedule .= "Daily" if $tmp_noofschedules == 7;
  		if($tmp_noofschedules < 7){
  			my @wdays = ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday');
  			@wdays = ('Sun','Mon','Tue','Wed','Thu','Fri','Sat') if $tmp_noofschedules > 1;
  			@wdays = ('Su','Mo','Tu','We','Th','Fr','Sa') if $tmp_noofschedules > 3;
  			@wdays = ('S','M','T','W','T','F','S') if $tmp_noofschedules > 4;
  			for(my $i=0;$i < $tmp_noofschedules;$i++){
  				$out_schedule .= $wdays[$tmp_schedules[$i]]."," if defined $wdays[$tmp_schedules[$i]];
  			}
  			$out_schedule = substr($out_schedule, 0, -1) if substr($out_schedule, -1, 1) eq ",";
  		}
  	}
	}
	
	##
	## Parse status/last completed/versions
	##
	my $out_status = "N/A";
	if(-e $RUNFILEPATH."sbackup_queuing_".$job{$tmp_job}{'NAME'}){
		$out_status = "Queuing";
	}
	if(-e $RUNFILEPATH."sbackup_".$job{$tmp_job}{'NAME'}){
		my @output = read_log($RUNFILEPATH."sbackup_".$job{$tmp_job}{'NAME'});
		my @val = split /|/, $output[0];
		$out_status = "backup"    if $val[0] eq "Running";
		$out_status = "restore"   if $val[0] eq "Restoring";
		$out_status = "purge"     if $val[0] eq "Purging";
		$out_status = "migration" if $val[0] eq "Migrating";
		$out_status = "copy"      if $val[0] eq "Copying";
	}
	my $out_versions = 0;
	my $out_lastcompleted = "N/A";
	my @tmp_history = &get_history($job{$tmp_job}{'NAME'},'status,start,name','type==backup');
	my $last_status = "N/A";
	for my $tmp(@{$tmp_history[2]}){
		$out_versions++ if $$tmp{'status'} eq "0";
		$out_lastcompleted = strftime("%a, %d %b %G %H:%M:%S", localtime($$tmp{'start'})) if $$tmp{'status'} eq "0";
		$last_status = $$tmp{'status'};
	}
	if($out_status eq "N/A"){
  	$out_status = $last_status;
  	$out_status = "Error:".$out_status if $out_status ne "0" && $out_status ne "N/A";
  	$out_status = "Completed" if $out_status eq "0";
  }
	
	##
	## Parse retention
	##
	my $out_retention;
	$out_retention = "Single version" if $job{$tmp_job}{'SOURCE'}{'-protect'} == 0;
	$out_retention = $job{$tmp_job}{'SOURCE'}{'-protect'}." day" if $job{$tmp_job}{'SOURCE'}{'-protect'} == 1;
	$out_retention = $job{$tmp_job}{'SOURCE'}{'-protect'}." days" if $job{$tmp_job}{'SOURCE'}{'-protect'} > 1;
	
	##
	## Get source and target
	##
	my $source_integ = "";
	my $source_name = "N/A";
	if(defined $job{$tmp_job}{'SOURCE'}{'-omv'} && $job{$tmp_job}{'SOURCE'}{'-omv'} ne ""){
		require omv;
		import omv;
		$source_integ = "OMV ";
		$source_name = omv_name_by_uuid($job{$tmp_job}{'SOURCE'}{'-omv'});
	}
	
	my $target_integ = "";
	my $target_name = "N/A";
	if(defined $job{$tmp_job}{'TARGET'}{'-omv'} && $job{$tmp_job}{'TARGET'}{'-omv'} ne ""){
		require omv;
		import omv;
		$target_integ = "OMV ";
		$target_name = omv_name_by_uuid($job{$tmp_job}{'TARGET'}{'-omv'});
	}
	
	##
	## Output
	##
	printf "%-1.1s %-18.18s %-18.18s %-10.10s %-16.16s %-20.20s %-20.20s %-14.14s %-3.3s\n",
		$out_enabled,
		$job{$tmp_job}{'NAME'},
		$out_schedule,
		$out_status,
		$out_lastcompleted,
		$source_integ.$source_name,
		$target_integ.$target_name,
		$out_retention,
		$out_versions;
		
}

return 1;