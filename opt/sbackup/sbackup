#!/usr/bin/perl

###########################################################################################
#
#                                         sbackup
#
#
###########################################################################################

use strict;
use warnings;

BEGIN {
	push (@INC, "/opt/sbackup/");
}

use init;
get_env;
use logger;
use config;
our %job = load_jobs_config;

##
## Parameters
##
our ($DEBUGMODE, $PREVIEWMODE, $sv_history, $sv_job, $sv_log, $sv_backup, $sv_purge, $sv_verify, $sv_restore, $sv_copy, $sv_abort, $sv_export, $sv_import, $sv_version, $sv_days, $sv_type, $sv_path, $sv_into, $sv_background, $sv_scheduler, $sv_api, $sv_all);
our ($p_debug, $p_job, $p_version, $p_days, $p_type, $p_path, $p_into, $p_log, $p_api);
$p_debug = 1;
my %arguments;
%{$arguments{"debug"}} = (
	"var" => \$::DEBUGMODE,
	"val1" => \$p_debug,
	"vals_mandatory" => 0,
	"help_header" => "Enable debug mode:",
	"help_args" => "-debug [1-5]",
	"help_display" => 0,
);
%{$arguments{"preview"}} = (
	"var" => \$::PREVIEWMODE,
	"vals_mandatory" => 0,
	"help_header" => "Simulated run:",
	"help_args" => "-preview",
	"help_display" => 0,
);

%{$arguments{"job"}} = (
	"var" => \$sv_job,
	"primary" => 1,
	"val1" => \$p_job,
	"vals_mandatory" => 0,
	"help_header" => "Jobs informations:",
	"help_args" => "Status of all jobs:\n\t\t-job
\tJob history:\n\t\t-job <job name> [-type (backup|purge|verify)]
\tVersion detail:\n\t\t-job <job name> -version <version>
\tVersion log:\n\t\t-job <job name> -version <version> -log [normal|warning|minor|major|critical]
\tVersion catalog:\n\t\t-job <job name> -version <version> -path [<directory>]",
	"help_display" => 1,
);

%{$arguments{"backup"}} = (
	"var" => \$sv_backup,
	"val1" => \$p_job,
	"vals_mandatory" => 2,
	"primary" => 1,
	"help_header" => "Start backup job:",
	"help_args" => "-backup <job name> [-preview]",
	"help_display" => 11,
);
%{$arguments{"purge"}} = (
	"var" => \$sv_purge,
	"val1" => \$p_job,
	"vals_mandatory" => 1,
	"primary" => 1,
	"help_header" => "Start purge job:",
	"help_args" => "-purge <job name> [-days <n>] [-preview]",# [-version <versionid>]",
	"help_display" => 12,
);
%{$arguments{"verify"}} = (
	"var" => \$sv_verify,
	"val1" => \$p_job,
	"vals_mandatory" => 1,
	"primary" => 1,
	"help_header" => "Start verify job:",
	"help_args" => "-verify <job name> -version <version> [-preview]",
	"help_display" => 13,
);
#%{$arguments{"copy"}} = (
#	"var" => \$sv_copy,
#	"val1" => \$p_job,
#	"vals_mandatory" => 1,
#	"primary" => 1,
#	"help_header" => "Start copy job:",
#	"help_args" => "-copy <job name>",
#	"help_display" => 14,
#);
#%{$arguments{"restore"}} = (
#	"var" => \$sv_restore,
#	"val1" => \$p_job,
#	"vals_mandatory" => 1,
#	"primary" => 1,
#	"help_header" => "Start restore job:",
#	"help_args" => "-restore <job name> [-version <versionid>] [-path <path>] [-into <path>]",
#	"help_display" => 15,
#);
%{$arguments{"abort"}} = (
	"var" => \$sv_abort,
	"val1" => \$p_job,
	"vals_mandatory" => 1,
	"primary" => 1,
	"help_header" => "Abort job:",
	"help_args" => "-abort <job name>",
	"help_display" => 19,
);

%{$arguments{"export"}} = (
	"var" => \$sv_export,
	"val1" => \$p_job,
	"vals_mandatory" => 1,
	"primary" => 1,
	"help_header" => "Export job:",
	"help_args" => "-export <job name>",
	"help_display" => 31,
);
%{$arguments{"import"}} = (
	"var" => \$sv_import,
	"val1" => \$p_path,
	"vals_mandatory" => 1,
	"primary" => 1,
	"help_header" => "Import job:",
	"help_args" => "-import <location>",
	"help_display" => 32,
);


%{$arguments{"log"}} = (
	"var" => \$sv_log,
	"val1" => \$p_log,
	"vals_mandatory" => 0,
	"dependency" => "job",
	"help_header" => "Job log:",
	"help_args" => "-job <job name> -version <version> -log [normal|warning|minor|major|critical]",
	"help_display" => 0,
);

%{$arguments{"type"}} = (
	"var" => \$sv_type,
	"val1" => \$p_type,
	"vals_mandatory" => 1,
	"dependency" => "job;purge",
	"help_header" => "Job type:",
	"help_args" => "-job <job name> -type (backup|purge|verify)",
	"help_display" => 0,
);
%{$arguments{"version"}} = (
	"var" => \$sv_version,
	"val1" => \$p_version,
	"vals_mandatory" => 1,
	"dependency" => "restore;purge;verify;job",
	"help_header" => "Job version:",
	"help_args" => "-version <version>",
	"help_display" => 0,
);
%{$arguments{"path"}} = (
	"var" => \$sv_path,
	"val1" => \$p_path,
	"vals_mandatory" => 0,
	"dependency" => "version",
	"help_header" => "Catalog path:",
	"help_args" => "-path <directory>",
	"help_display" => 0,
);
#%{$arguments{"into"}} = (
#	"var" => \$sv_into,
#	"val1" => \$p_into,
#	"vals_mandatory" => 1,
#	"dependency" => "restore",
#	"help_header" => "Target directory:",
#	"help_args" => "-into <directory>",
#	"help_display" => 0,
#);
%{$arguments{"days"}} = (
	"var" => \$sv_days,
	"val1" => \$p_days,
	"vals_mandatory" => 1,
	"dependency" => "purge",
	"help_header" => "Number of days:",
	"help_args" => "-days <days>",
	"help_display" => 0,
);

%{$arguments{"background"}} = (
	"var" => \$sv_background,
	"vals_mandatory" => 0,
	"dependency" => "backup;purge;verify;restore",
	"help_header" => "Run in background",
	"help_args" => "[-background]",
	"help_display" => 0,
);
%{$arguments{"api"}} = (
	"var" => \$sv_api,
	"val1" => \$p_api,
	"vals_mandatory" => 1,
	"help_header" => "Use api",
	"help_args" => "[-api <api name>]",
	"help_display" => 0,
);

%{$arguments{"all"}} = (
	"var" => \$sv_all,
	"vals_mandatory" => 0,
	"dependency" => "job",
	"help_header" => "Run api",
	"help_args" => "[-api]",
	"help_display" => 0,
);

%{$arguments{"scheduler"}} = (
	"var" => \$sv_scheduler,
	"vals_mandatory" => 0,
	"help_header" => "Run scheduler",
	"help_args" => "[-scheduler]",
	"help_display" => 0,
);

&f_arguments(\%arguments);


##
##CODE START
##

if($sv_api){
	require "modules/api.sbm";
	exit 0;
}

if($sv_backup){
	require "modules/backup.sbm";
}

if($sv_verify){
	require "modules/verify.sbm";
}

#if($sv_restore){
#	require "modules/restore.sbm";
#}

#if($sv_copy){
#	require "modules/copy.sbm";
#}

if($sv_purge){
	require "modules/purge.sbm";
}

if($sv_abort){
	require "modules/abort.sbm";
}

if($sv_job){
	require "modules/job.sbm";
}

if($sv_import){
	require "modules/import.sbm";
}

if($sv_export){
	require "modules/export.sbm";
}

if($sv_scheduler){
	require "modules/scheduler.sbm";
}

##
##CODE END
##
print "\n";

exit 0;