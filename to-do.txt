=================================================================
==JOB============================================================
[] add "all" parameter to display versions for all jobs

=================================================================
==IMPORT=========================================================
[] import backup. (save backup configuration within backup_uuid folder), select share point, search subdirectories for configs, show only those which have correct config and are not imported already

=================================================================
==MIGRATION======================================================
[] - sbackup -migrate testbkp -type filesystem/omv4 -into test_share
- "mv" data migration. started with "at", change state to "migrating", creates lockfile with old source for restart in case of failure

=================================================================
==BACKUP=========================================================
[GUI]
- warning on changing backup source (same as for changing filesystem in shared folders)
- warning on changing backup target (same as for changing filesystem in shared folders)

[?] - multiple paths in source
[?] - target concurrency

=================================================================
==REPORT=========================================================
[] - generate 24 hour/7day report

=================================================================
==VERIFY=========================================================
- Check if data directories exists for all backups in history log
- Check if there are data directories not present in history log
- When session log is present, check if all data exists in data directory according to log, check hardlinks(?)

=================================================================
==RESTORE========================================================
[]- restore into different location

[]- autoselect latest version
[]- browse files

=================================================================
==CREATE/EDIT JOB commands========================================================

=================================================================
==BACKUP LVM=========================================================
[] - LVM snapshot (fields: checkbox enable, allow fallback, %sizeslider:sliderfield)

==========================================
[] - Check if snapshot exists (crashed/killed)
root@nc-nas1:~# lvdisplay /dev/mapper/vg_ssd01-sbackup_testbkp_snap1;echo $?
  Failed to find logical volume "vg_ssd01/sbackup_testbkp_snap1"
5
root@nc-nas1:~# lvdisplay /dev/mapper/vg_ssd01-sbackup_testbkp_snap;echo $?
  --- Logical volume ---
  LV Path                /dev/vg_ssd01/sbackup_testbkp_snap
  LV Name                sbackup_testbkp_snap
  VG Name                vg_ssd01
  LV UUID                kIFpBo-JsLU-ftnY-oAEp-9pOK-aqua-vZCb4s
  LV Write Access        read/write
  LV Creation host, time nc-nas1, 2018-06-04 18:52:56 +0200
  LV snapshot status     active destination for lv_svn
  LV Status              available
  # open                 0
  LV Size                164.00 MiB
  Current LE             41
  COW-table size         168.00 MiB
  COW-table LE           42
  Allocated to snapshot  0.01%
  Snapshot chunk size    4.00 KiB
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           254:10

0

>> lvremove -f /dev/mapper/vg_ssd01-sbackup_testbkp_snap
==========================================
root@nc-nas1:~# df /sharedfolders/svn
Filesystem                  1K-blocks  Used Available Use% Mounted on
/dev/mapper/vg_ssd01-lv_svn    146272 37180    105736  27% /sharedfolders/svn
==========================================
root@nc-nas1:~# lvdisplay /dev/mapper/vg_ssd01-lv_svn1 >/dev/null 2>&1;echo $?
5
root@nc-nas1:~# lvdisplay /dev/mapper/vg_ssd01-lv_svn >/dev/null 2>&1;echo $?
0
==========================================
root@nc-nas1:~# lvcreate -l50%FREE -s -n sbackup_testbkp_snap /dev/mapper/vg_ssd01-lv_svn;echo $?
  Using default stripesize 64.00 KiB.
  Reducing COW size 3.42 GiB down to maximum usable size 168.00 MiB.
  Logical volume "sbackup_testbkp_snap" created.
0
==========================================
root@nc-nas1:~# mount -oro /dev/mapper/vg_ssd01-sbackup_testbkp_snap /mnt/sbackup_testbkp_snap1;echo $?
mount: mount point /mnt/sbackup_testbkp_snap1 does not exist
32
root@nc-nas1:~# mount -oro /dev/mapper/vg_ssd01-sbackup_testbkp_snap1 /mnt/sbackup_testbkp_snap;echo $?
mount: special device /dev/mapper/vg_ssd01-sbackup_testbkp_snap1 does not exist
32
root@nc-nas1:~# mount -oro /dev/mapper/vg_ssd01-sbackup_testbkp_snap /mnt/sbackup_testbkp_snap;echo $?
0
 << check if snapshot is mounted, allow fallback?
==========================================
<< BACKUP
==========================================
root@nc-nas1:~# umount /mnt/sbackup_testbkp_snap1;echo $?
umount: /mnt/sbackup_testbkp_snap1: mountpoint not found
32
root@nc-nas1:~# umount /mnt/sbackup_testbkp_snap;echo $?
0
==========================================
root@nc-nas1:~# lvremove -f /dev/mapper/vg_ssd01-sbackup_testbkp_snapa;echo $?
  Failed to find logical volume "vg_ssd01/sbackup_testbkp_snapa"
5
root@nc-nas1:~# lvremove -f /dev/mapper/vg_ssd01-sbackup_testbkp_snap;echo $?
  Logical volume "sbackup_testbkp_snap" successfully removed
0
==========================================
==========================================
==========================================
root@nc-nas1:~# lvs
  LV                   VG        Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  lv_backup            vg_backup -wi-ao---- 803.64g
  lv_download          vg_backup -wi-ao----  10.00g
  lv_hikari            vg_backup -wi-ao----  38.89g
  lv_install           vg_backup -wi-ao----  15.00g
  lv_plex              vg_backup -wi-ao----   1.00t
  lv_audiobooks        vg_ssd01  -wi-ao---- 211.57g
  lv_plexdb            vg_ssd01  -wi-ao----   5.00g
  lv_svn               vg_ssd01  owi-aos--- 164.00m
  sbackup_testbkp_snap vg_ssd01  swi-a-s--- 168.00m      lv_svn 0.01

=================================================================
==COPY===========================================================
[] rclone for sync to cloud

-fields:
backup_uuid
target_type (shared folder, rsync server, ssh) < (rsync: user, pwd, ip), (ssh: user, ip)
retention
post_purge
post_job

[] automatic scheduler > automatic copy, after all backups are done

=================================================================
==OS BACKUP======================================================
dpkg -l|awk '{print $2}'|grep "^openmediavault-"
/etc/passwd
/etc/group
/etc/fstab ([openmediavault] part)

=================================================================
==FUTURE=========================================================

- change rm to (rsync -arv --delete ~/empty_local_folder/ /path/to/remote/folder/)
=================================================================
-add support to choose to backup to rsync server

Copy a File from a Remote Server to a Local Server with SSH
[root@tecmint]# rsync -avzhe ssh root@192.168.0.100:/root/install.log /tmp/

Copy a File from a Local Server to a Remote Server with SSH
[root@tecmint]# rsync -avzhe ssh backup.tar root@192.168.0.100:/backups/

8. Automatically Delete source Files after successful Transfer (copy session)
[root@tecmint]# rsync --remove-source-files -zvh backup.tar /tmp/backups/

10. Set Bandwidth Limit and Transfer File
[root@tecmint]# rsync --bwlimit=100 -avzhe ssh  /var/lib/rpm/  root@192.168.0.100:/root/tmprpm/
=================================================================


 -c, --checksum              skip based on checksum, not mod-time & size

excludes?:
 --exclude=PATTERN       exclude files matching PATTERN


=================================================================
=================================================================
NAME testjob
ENABLED 1

SCHEDULE {
        -enabled 1
        -day Mon Tue Sat
        -time 02:00
        -automatic daily
}

SOURCE {
        -host hostname.domain.com
        -type omv4
        -tree download
        -snapshot {
                -enabled 1
                -type lvm
                -size 10
                -fallback yes
        }
        -protect 7
}

TARGET {
        -host hostname.domain.com
        -type omv4
        -tree backuptest
}

POST {
        -job {
                -type backup
                -name asdf
        }
}