In history log, create column for backup without data_uuid (rework all grep "|backup|$" to "|backup|(d*)|$")

==HISTORY========================================================
[]- option to remove version in backup history (create lockfile, delete data_uuid,release lockfile), run with "at now"
[]- start restore from backup history
- icons for status (completed, failed)
=================================================================

==BKPLIST========================================================
- show progress wheel on running like with Filesystem > Status when formating
- icons for status (completed, failed)

- ?abort job
- ?running job status
=================================================================

==BACKUP=========================================================
- restart failed jobs
- warning on changing backup source (same as for changing filesystem in shared folders)
- warning on changing backup target (same as for changing filesystem in shared folders)
[]- settings, only one backup at once > queuing
[]- settings, only one backup to one target datastore at once > queuing

- rework schedule (combo checkbox?), ability to disable schedule
- disable will disable getting started as post_job, its copy, purge, verify

[]- use --log-file=FILE for realtime updates, after finished, copy it as metadata to backup destination
- backup configuration (backup specifications and backup history) after each backup, import via settings tab (backup history log copy and omv config import in same way as postinst)
  import backup. (save backup configuration within backup_uuid folder), select share point, search subdirectories for configs, show only those which have correct config and are not imported already
[]- report checkbox
[]- LVM snapshot?
=================================================================

==RESTORE========================================================
- restore into different location

[]- autoselect latest version
[]- browse files
=================================================================

==VERIFY=========================================================
-Check if there are data directories not present in history log
-Check if there are data directories preset as failed (except last session)
-When session log is present(or by metadata), check if all data exists in data directory according to log, check hardlinks(?)
-md5 data consistency check? metadata based on rsync log saved into /meta_uuid directory (file/md5)
=================================================================

==COPY===========================================================
-fields:
backup_uuid
target_type (shared folder, rsync server, ssh) < (rsync: user, pwd, ip), (ssh: user, ip)
retention
savelog
post_purge
post_job

=================================================================

==RESTART========================================================
-Scheduled every 15 minutes
-checks history logs for one time failure
-restart job with "at now" soonest hour after failure
=================================================================


==FUTURE=========================================================
- "mv" data migration. started with "at", change state to "migrating", creates lockfile with old source for restart in case of failure

- change rm to (rsync -arv --delete ~/empty_local_folder/ /path/to/remote/folder/)
=================================================================
-add support to choose to backup to rsync server

Copy a File from a Remote Server to a Local Server with SSH
[root@tecmint]# rsync -avzhe ssh root@192.168.0.100:/root/install.log /tmp/

Copy a File from a Local Server to a Remote Server with SSH
[root@tecmint]# rsync -avzhe ssh backup.tar root@192.168.0.100:/backups/

8. Automatically Delete source Files after successful Transfer (copy session)
[root@tecmint]# rsync --remove-source-files -zvh backup.tar /tmp/backups/

10. Set Bandwidth Limit and Transfer File
[root@tecmint]# rsync --bwlimit=100 -avzhe ssh  /var/lib/rpm/  root@192.168.0.100:/root/tmprpm/
=================================================================


 -c, --checksum              skip based on checksum, not mod-time & size

excludes?:
 --exclude=PATTERN       exclude files matching PATTERN
